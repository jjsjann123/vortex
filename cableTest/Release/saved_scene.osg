Group {
  UniqueID Group_0
  name "VxSceneGraph Scene Root"
  nodeMask 0xffffffff
  cullingActive TRUE
  StateSet {
    UniqueID StateSet_1
    DataVariance DYNAMIC
    rendering_hint DEFAULT_BIN
    renderBinMode INHERIT
    0x3fff OFF
    GL_LIGHT0 ON
    Uniform {
      name "projectiveTextureMinDistance"
      type float 2 FloatArray 2
      {
        0 0 
      }
    }
    Uniform {
      UniqueID Uniform_2
      name "vxOSG_ShadowCastingLight"
      type int 1 IntArray 1
      {
        -1 
      }
    }
    Uniform {
      name "vxOSG_TexturedObject"
      type bool 1 IntArray 1
      {
        1 
      }
    }
    Uniform {
      name "vxOSG_ShadowLevel"
      type float 1 FloatArray 1
      {
        0.7 
      }
    }
    Uniform {
      name "vxOSG_SpotCosInnerCone"
      type float 8 FloatArray 8
      {
        1 1 1 1 1 1 1 1 
      }
    }
    Uniform {
      name "vxOSG_IsBelowWater"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Uniform {
      UniqueID Uniform_3
      name "vxOSG_LightingAmbient"
      type vec4 1 FloatArray 4
      {
        0 0 0 1 
      }
    }
    Uniform {
      name "vxOSG_ShadowEnabled"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Uniform {
      UniqueID Uniform_4
      name "vxOSG_LightingEnabled"
      type bool 1 IntArray 1
      {
        1 
      }
    }
    Uniform {
      UniqueID Uniform_5
      name "vxOSG_FogEnabled"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Uniform {
      name "vxOSG_MustGenerateTextureCoordinates"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Uniform {
      name "vxOSG_ProjectiveLightID"
      type int 8 IntArray 8
      {
        0 0 0 0 0 0 0 0 
      }
    }
    Uniform {
      name "vxOSG_SpotCosOuterCone"
      type float 8 FloatArray 8
      {
        -1 -1 -1 -1 -1 -1 -1 -1 
      }
    }
    Uniform {
      name "projectiveTextureTransform"
      type mat4 2 FloatArray 32
      {
        1 0 0 0 0 1 0 0 0 0
        1 0 0 0 0 1 1 0 0 0
        0 1 0 0 0 0 1 0 0 0
        0 1 
      }
    }
    Uniform {
      name "projectiveTextureMaxDistance"
      type float 2 FloatArray 2
      {
        1 1 
      }
    }
    Uniform {
      UniqueID Uniform_6
      name "vxOSG_DepthPass"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Uniform {
      name "vxOSG_HeightField"
      type bool 1 IntArray 1
      {
        0 
      }
    }
    Program {
      UniqueID Program_7
      name "CompiledProgram_6"
      GeometryVerticesOut 1
      GeometryInputType TRIANGLES
      GeometryOutputType TRIANGLE_STRIP
      AttribBindingLocation osg_Color 3
      AttribBindingLocation osg_FogCoord 5
      AttribBindingLocation osg_MultiTexCoord0 8
      AttribBindingLocation osg_MultiTexCoord1 9
      AttribBindingLocation osg_MultiTexCoord2 10
      AttribBindingLocation osg_Normal 2
      AttribBindingLocation osg_SecondaryColor 4
      AttribBindingLocation osg_Vertex 0
      AttribBindingLocation tangentAttrib 11
      num_shaders 2
      Shader {
        type VERTEX
        code {
          "#define DIFFUSE_MAP 1"
          "#define DIRECTIONAL_LIGHT_COUNT 1"
          "#define FLOW_ANIM 0"
          "#define GENERATE_TANGENT_SPACE 0"
          "#define HEIGHT_FIELD_BLENDING 0"
          "#define HEIGHT_FIELD_EDITION_MODE 0"
          "#define HOLES 0"
          "#define INSTANCING 0"
          "#define MATERIAL 1"
          "#define NORMAL_MAP 0"
          "#define OUTPUT_GBUFFER 0"
          "#define PARTICLES 0"
          "#define POINT_LIGHT_COUNT 0"
          "#define PROJECTIVE_LIGHT_COUNT 0"
          "#define SHADOW 1"
          "#define SPECULAR_MAP 0"
          "#define SPOT_LIGHT_COUNT 0"
          "#define TERRAIN_BLENDING 0"
          "#define TRIPLANAR 0"
          "#define TRIPLANAR_BLENDING 0"
          "#define USE_GEOMETRY_SHADER_PIPELINE 0"
          ""
          "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.vert\""
          "//   Copyright (c) 2000-2007 CMLabs Simulations Inc."
          "//"
          "//   http://www.cm-labs.com"
          "//"
          "//   $Name: uber_material.vert $"
          "//"
          "//   Date: $Date: 2013/08/12 $"
          "//"
          "//   This software and its accompanying manuals have been developed by CMLabs"
          "//   Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//   The copyright to the Vortex Toolkits and all associated materials"
          "//   belongs to CMLabs."
          "//"
          "//   All intellectual property rights in the software belong to CMLabs."
          "//"
          "//   All rights conferred by law (including rights under international"
          "//   copyright conventions) are reserved to CMLabs. This software may also"
          "//   incorporate information which is confidential to CMLabs."
          "//"
          "//   Save to the extent permitted by law, or as otherwise expressly permitted"
          "//   by CMLabs, this software and the manuals must not be copied (in whole or"
          "//   in part), re-arranged, altered or adapted in any way without the prior"
          "//   written consent of CMLabs. In addition, the information contained in the"
          "//   software may not be disseminated without the prior written consent of"
          "//   CMLabs."
          ""
          "#version 330 compatibility"
          ""
          "#ifndef UBER_MATERIAL_VERT"
          "#define UBER_MATERIAL_VERT"
          ""
          "in vec4 osg_Vertex;"
          "in vec3 osg_Normal;"
          "in vec4 osg_Color;"
          "in vec4 osg_MultiTexCoord0;"
          ""
          "/// Common Uniforms"
          "uniform mat4 osg_ViewMatrix;"
          "uniform mat4 osg_ModelViewMatrix;"
          "uniform mat4 osg_ViewMatrixInverse;"
          "uniform mat4 osg_ModelViewProjectionMatrix;"
          "uniform mat4 osg_ProjectionMatrix;"
          "uniform mat4 osg_ProjectionMatrixInverse;"
          "uniform mat3 osg_NormalMatrix;"
          ""
          "// Includes"
          "#line 0 \"material_common.vert\""
          "//    Copyright (c) 2000-2007 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: material_common.vert $"
          "//"
          "//    Date: $Date: 2012/11/02 16:57:00 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef MATERIAL_COMMON_VERT"
          "#define MATERIAL_COMMON_VERT"
          ""
          "uniform bool vxOSG_TexturedObject;"
          "out vec4 vxg_TexCoord0;"
          "out vec4 vxg_vertexColor;"
          "out vec4 vxg_FragPosition;"
          ""
          "void materialColor(vec4 multiTexCoord0, vec4 vertexColor)"
          "{"
          "    if (vxOSG_TexturedObject)"
          "    {"
          "        vxg_TexCoord0 = gl_TextureMatrix[0] * multiTexCoord0;"
          "    }"
          "    vxg_vertexColor = vertexColor;"
          "}"
          ""
          "void materialClip(vec4 pos)"
          "{"
          "    gl_ClipVertex = pos; // for reflections"
          "}"
          ""
          "void materialFog(vec4 pos)"
          "{"
          "    vxg_FragPosition = pos;"
          "}"
          ""
          "#endif"
          ""
          "#line 48 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.vert\""
          "#line 0 \"shadowMapVD_shadow.vert\""
          "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//   http://www.cm-labs.com"
          "//"
          "//   $Name: shadowMapVD_shadows.vert $"
          "//"
          "//   Date: $Date: 2012/02/29 11:02:19 $"
          "//"
          "//   This software and its accompanying manuals have been developed by CMLabs"
          "//   Simulations Inc. (\"CMLabs\")."
          "//"
          "//   The copyright to the Vortex Toolkits and all associated materials"
          "//   belongs to CMLabs."
          "//"
          "//   All intellectual property rights in the software belong to CMLabs."
          "//"
          "//   All rights conferred by law (including rights under international"
          "//   copyright conventions) are reserved to CMLabs. This software may also"
          "//   incorporate information which is confidential to CMLabs."
          "//"
          "//   Save to the extent permitted by law, or as otherwise expressly permitted"
          "//   by CMLabs, this software and the manuals must not be copied (in whole or"
          "//   in part), re-arranged, altered or adapted in any way without the prior"
          "//   written consent of CMLabs. In addition, the information contained in the"
          "//   software may not be disseminated without the prior written consent of"
          "//   CMLabs."
          ""
          "#line 0 \"shadowMapVD_shadow_common.glsl\""
          "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//   http://www.cm-labs.com"
          "//"
          "//   $Name: shadowMapVD_shadows.vert $"
          "//"
          "//   Date: $Date: 2012/02/29 11:02:19 $"
          "//"
          "//   This software and its accompanying manuals have been developed by CMLabs"
          "//   Simulations Inc. (\"CMLabs\")."
          "//"
          "//   The copyright to the Vortex Toolkits and all associated materials"
          "//   belongs to CMLabs."
          "//"
          "//   All intellectual property rights in the software belong to CMLabs."
          "//"
          "//   All rights conferred by law (including rights under international"
          "//   copyright conventions) are reserved to CMLabs. This software may also"
          "//   incorporate information which is confidential to CMLabs."
          "//"
          "//   Save to the extent permitted by law, or as otherwise expressly permitted"
          "//   by CMLabs, this software and the manuals must not be copied (in whole or"
          "//   in part), re-arranged, altered or adapted in any way without the prior"
          "//   written consent of CMLabs. In addition, the information contained in the"
          "//   software may not be disseminated without the prior written consent of"
          "//   CMLabs."
          ""
          "#ifndef SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
          "#define SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
          ""
          "#if SHADOW"
          "uniform int shadowTextureUnit0;"
          ""
          "mat4 getShadowMatrixTransposed()"
          "{"
          "    mat4 shadowMatrixTransposed;"
          "    shadowMatrixTransposed[0] = gl_EyePlaneS[shadowTextureUnit0];"
          "    shadowMatrixTransposed[1] = gl_EyePlaneT[shadowTextureUnit0];"
          "    shadowMatrixTransposed[2] = gl_EyePlaneR[shadowTextureUnit0];"
          "    shadowMatrixTransposed[3] = gl_EyePlaneQ[shadowTextureUnit0];"
          "    return shadowMatrixTransposed;"
          "}"
          ""
          "vec4 getShadowTexCoord(in vec3 position, in mat4 shadowMatrixTransposed)"
          "{"
          "    return vec4(position, 1) * shadowMatrixTransposed;"
          "}"
          "#endif"
          ""
          "#endif"
          ""
          "#line 28 \"shadowMapVD_shadow.vert\""
          ""
          "#if SHADOW"
          "out vec4 shadowTextureCoord;"
          ""
          "mat4 DynamicShadow()"
          "{"
          "    return getShadowMatrixTransposed();"
          "}"
          ""
          "void DynamicShadowPipeline( in vec3 ecPosition )"
          "{"
          "    shadowTextureCoord = getShadowTexCoord(ecPosition, getShadowMatrixTransposed());"
          "}"
          "#endif"
          ""
          "#line 49 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.vert\""
          ""
          "/// Extensions"
          "#if INSTANCING"
          "#extension GL_EXT_gpu_shader4: require"
          "#extension GL_ARB_draw_instanced: require"
          "#endif"
          ""
          "#line 0 \"uber_lighting.vert\""
          "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: uber_lighting.vert $"
          "//"
          "//    Date: $Date: 2012/02/29 11:00:00 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef UBER_LIGHTING_VERT"
          "#define UBER_LIGHTING_VERT"
          ""
          "uniform bool vxOSG_LightingEnabled;"
          ""
          "out vec3 vNormal;"
          "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
          "out vec3 vTangent;"
          "#endif"
          "out vec3 vecPosition3;"
          ""
          "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
          "in vec3 tangentAttrib;"
          "#endif"
          ""
          "void lighting( in vec3 normal, in vec4 ecPos, in vec3 ecPosition3 )"
          "{"
          "    vNormal = normalize(normal);"
          "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
          "    vTangent = normalize(osg_NormalMatrix * tangentAttrib);"
          "    #if PARTICLES"
          "    vTangent = normalize(tangentAttrib);"
          "    #endif"
          "#endif"
          "    vecPosition3 = ecPosition3;"
          ""
          "#if SHADOW"
          "    DynamicShadowPipeline( ecPos.xyz );"
          "#endif"
          "}"
          ""
          "void lightingPipeline(vec3 normal, vec4 position4)"
          "{"
          "    if (vxOSG_LightingEnabled)"
          "    {"
          "        lighting( normal, position4, position4.xyz / position4.w );"
          "    }"
          "}"
          ""
          "#endif"
          ""
          "#line 57 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.vert\""
          ""
          "uniform mat4 projectiveTextureTransform[2];"
          ""
          "/// Common output parameters"
          "out vec4 vxg_TexCoord3;"
          "out vec4 vxg_TexCoord4;"
          ""
          "#if HEIGHT_FIELD_BLENDING || (TRIPLANAR && FLOW_ANIM) || TERRAIN_BLENDING"
          "attribute vec4 vxOSG_HeightFieldParams;"
          "#endif"
          "#if HEIGHT_FIELD_BLENDING"
          "out vec4 heightFieldElevation;"
          "#endif"
          "#if TERRAIN_BLENDING"
          "out vec3 terrainX;"
          "out vec3 terrainY;"
          "out float terrainBlendMask;"
          "#endif"
          ""
          "#if TRIPLANAR"
          "uniform bool useTriplanarWorldSpace;"
          ""
          "#endif"
          "#line 0 \"triPlanar_common.vert\""
          "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: triPlanar_common.frag shader for marching cubes $"
          "//"
          "//    Date: $Date: 2012/12/10 12:52:0 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef TRIPLANAR_COMMMON_VERT"
          "#define TRIPLANAR_COMMMON_VERT"
          ""
          "#if TRIPLANAR"
          "// attribute vec4 osg_Vertex;"
          "// attribute vec3 osg_Normal;"
          "out vec3 triplanarPosition;"
          "out vec3 triplanarNormal;"
          "// uniform mat4 osg_ModelViewMatrix;"
          ""
          "void selectSpaceCoordinate(in bool useTriplanarWorldSpace)"
          "{"
          "    vec3 position, normal;"
          "    mat4 modelMatrix = osg_ViewMatrixInverse * osg_ModelViewMatrix;"
          "    if (useTriplanarWorldSpace)"
          "    {"
          "        position = (modelMatrix * osg_Vertex).xyz;"
          "        normal   = osg_Normal;"
          "    }"
          "    else // model space"
          "    {"
          "        position = osg_Vertex.xyz;"
          "        normal   = osg_Normal;"
          "    }"
          ""
          "    triplanarPosition = position;"
          "    triplanarNormal = normal;"
          "}"
          ""
          "#endif"
          ""
          "#endif"
          ""
          "#line 81 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.vert\""
          ""
          "#if INSTANCING"
          "uniform mat4 instanceTransform[128];"
          "uniform vec4 instanceColor[128];"
          "out vec4 materialDiffuse;"
          "#endif"
          ""
          "#if HOLES"
          "uniform mat4 VxGraphicsOSG_Holes[4];"
          "out vec4 holesX;"
          "out vec4 holesY;"
          "#endif"
          ""
          "#if PARTICLES"
          "in float scale;"
          "in float rotationAngle;"
          "in vec2 textureTileXY;"
          ""
          "out vec2 vertexTextureCoordinate;"
          "out vec4 ndcPosition;"
          "#endif"
          ""
          "void main()"
          "{"
          "    vec4 inputVertex = osg_Vertex;"
          "    vec3 inputNormal = osg_Normal;"
          "    vec4 viewPos;"
          ""
          "#if HEIGHT_FIELD_BLENDING"
          "    heightFieldElevation = vec4(0);"
          "    heightFieldElevation.x = inputVertex.z;"
          "    heightFieldElevation.y = vxOSG_HeightFieldParams.x;"
          "#endif"
          ""
          "#if TERRAIN_BLENDING"
          "    terrainX = normalize(osg_NormalMatrix * vec3(1, 0, 0));"
          "    terrainY = normalize(osg_NormalMatrix * vec3(0, 1, 0));"
          "    terrainBlendMask = vxOSG_HeightFieldParams.y;"
          "#endif"
          ""
          "#if INSTANCING"
          "    mat4 instanceTM = instanceTransform[gl_InstanceID];"
          "    vec4 worldPos = (osg_ViewMatrixInverse*osg_ModelViewMatrix) * inputVertex;"
          "    worldPos = instanceTM * worldPos;"
          ""
          "    // Transform vertex to clip space"
          "    viewPos = osg_ViewMatrix * worldPos;"
          ""
          "    materialDiffuse = instanceColor[gl_InstanceID];"
          "#else"
          "    viewPos = osg_ModelViewMatrix * inputVertex;"
          "#endif"
          ""
          "#if PARTICLES"
          "    vec4 projectSpace;"
          "    vec4 screenPosition;"
          "    {"
          "        vertexTextureCoordinate = osg_MultiTexCoord0.xy;"
          ""
          "        float cosRot = cos(rotationAngle);"
          "        float sinRot = sin(rotationAngle);"
          ""
          "        vec3 right = cross(inputNormal, vec3(1.0, 0.0, 0.0));"
          "        right = normalize(right);"
          "        vec3 up = cross(inputNormal, right);"
          "        vec4 vertexLocalPosition = inputVertex;"
          "        vec3 rightRot = right*cosRot + up*sinRot;"
          "        vec3 upRot =    up*cosRot - right*sinRot;"
          "        vertexLocalPosition.xyz  += (rightRot*(osg_MultiTexCoord0.x - textureTileXY.x) + upRot*(osg_MultiTexCoord0.y - textureTileXY.y))*scale;"
          "        vec4 orientedScreenPosition = osg_ModelViewProjectionMatrix*vertexLocalPosition;"
          ""
          "        // Camera-facing sprite code."
          "        screenPosition = osg_ModelViewMatrix * inputVertex;"
          "        mat2 rotation = mat2("
          "        cosRot, -sinRot,"
          "        sinRot, cosRot);"
          "        screenPosition.xy += (osg_MultiTexCoord0.xy - vec2(0.5f, 0.5f)) * rotation * scale;"
          "        vec4 cameraFacingScreenPosition = osg_ProjectionMatrix * screenPosition;"
          ""
          "        projectSpace = dot(inputNormal, inputNormal) < 0.1 ? cameraFacingScreenPosition : orientedScreenPosition;"
          ""
          "        ndcPosition = projectSpace;"
          "        viewPos = osg_ProjectionMatrixInverse * projectSpace;"
          "    }"
          "#endif"
          ""
          "#if HOLES"
          "    for (int hole = 0; hole < HOLES; ++hole)"
          "    {"
          "        // Save X and Y position in the hole space unit cube (valid range is from -1 to +1)"
          "        vec4 holePos = VxGraphicsOSG_Holes[hole] * osg_ViewMatrixInverse * viewPos;"
          "        holesX[hole] = holePos.x;"
          "        holesY[hole] = holePos.y;"
          "    }"
          "#endif"
          ""
          "    // Transform vertex to clip space"
          "#if PARTICLES"
          "    gl_Position = projectSpace;"
          "#else"
          "    gl_Position = osg_ProjectionMatrix * viewPos;"
          "#endif"
          ""
          "    // Vertex normal"
          "    vec3 normal;"
          "#if PARTICLES"
          "    // Use front facing or transformed normal"
          "    normal = dot(inputNormal, inputNormal) < 0.1 ? -(screenPosition).xyz : osg_NormalMatrix * inputNormal;"
          "#elif INSTANCING"
          "    mat3 instanceNormalMatrix = transpose(inverse(mat3(osg_ViewMatrix * instanceTM)));"
          "    normal = normalize(instanceNormalMatrix * inputNormal);"
          "#else"
          "    // Always use transformed normal"
          "    normal = osg_NormalMatrix * inputNormal;"
          "#endif"
          ""
          "#if TRIPLANAR"
          "    selectSpaceCoordinate(useTriplanarWorldSpace);"
          "#endif"
          ""
          "    // texture coordinate for the current vertex for projection texture"
          "    vec4 posWorld = osg_ViewMatrixInverse * viewPos;"
          "    vxg_TexCoord3 = projectiveTextureTransform[0] * posWorld;"
          "    vxg_TexCoord4 = projectiveTextureTransform[1] * posWorld;"
          ""
          "    materialClip(viewPos);"
          "    lightingPipeline(normal, viewPos);"
          "    materialColor(osg_MultiTexCoord0, osg_Color);"
          "    materialFog(viewPos);"
          ""
          "    gl_FrontColor = osg_Color;"
          "    gl_FrontSecondaryColor = vec4(0.0);"
          "    gl_BackColor = gl_FrontColor;"
          "    gl_BackSecondaryColor = gl_FrontSecondaryColor;"
          "}"
          ""
          "#endif"
        }
      }
      Shader {
        type FRAGMENT
        code {
          "#define DIFFUSE_MAP 1"
          "#define DIRECTIONAL_LIGHT_COUNT 1"
          "#define FLOW_ANIM 0"
          "#define GENERATE_TANGENT_SPACE 0"
          "#define HEIGHT_FIELD_BLENDING 0"
          "#define HEIGHT_FIELD_EDITION_MODE 0"
          "#define HOLES 0"
          "#define INSTANCING 0"
          "#define MATERIAL 1"
          "#define NORMAL_MAP 0"
          "#define OUTPUT_GBUFFER 0"
          "#define PARTICLES 0"
          "#define POINT_LIGHT_COUNT 0"
          "#define PROJECTIVE_LIGHT_COUNT 0"
          "#define SHADOW 1"
          "#define SPECULAR_MAP 0"
          "#define SPOT_LIGHT_COUNT 0"
          "#define TERRAIN_BLENDING 0"
          "#define TRIPLANAR 0"
          "#define TRIPLANAR_BLENDING 0"
          "#define USE_GEOMETRY_SHADER_PIPELINE 0"
          ""
          "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          "//    Copyright (c) 2000-2007 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: uber_material.frag $"
          "//"
          "//    Date: $Date: 2013/08/12 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "// ----------------------------------------------------------------------------"
          "// Material Ubershader"
          "// ----------------------------------------------------------------------------"
          "// "
          ""
          "#version 330 compatibility"
          ""
          "#ifndef UBER_MATERIAL_FRAG"
          "#define UBER_MATERIAL_FRAG"
          ""
          "// Textures (must always be defined to preserve texture slot assignments"
          "uniform sampler2D texture0;         // diffuse map"
          "uniform sampler2D texture1;         // normal map"
          "uniform sampler2D texture2;         // specular map"
          "uniform sampler2D texture3;         // alternate diffuse map"
          "uniform sampler2D texture4;         // alternate normal map"
          "uniform sampler2D texture5;         // alternate specular map"
          "uniform sampler2D texture6;         // depth/blend mask"
          ""
          "uniform mat4 osg_ProjectionMatrixInverse;"
          ""
          "// Includes"
          "#line 0 \"material_common.frag\""
          "//    Copyright (c) 2000-2007 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: material_common.frag $"
          "//"
          "//    Date: $Date: 2012/11/02 16:57:00 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef MATERIAL_COMMON_FRAG"
          "#define MATERIAL_COMMON_FRAG"
          ""
          "uniform bool vxOSG_TexturedObject;"
          "uniform bool vxOSG_FogEnabled;"
          "uniform vec4 vxOSG_FogColor;"
          "uniform float vxOSG_FogDensity;"
          "uniform bool vxOSG_IsBelowWater;"
          "in vec4 vxg_vertexColor;"
          "in vec4 vxg_FragPosition;"
          ""
          "float getFogDensityFromDistance(float distance)"
          "{"
          "    // This formula is the inverse of the exp2 formula of the fog computation"
          "    // The fog value will always be 0,01 at the distance given by the user"
          "    const float fogValue = 0.01;"
          "    return  sqrt(-1.0 * log(fogValue)) / distance;"
          "}"
          ""
          "vec4 materialColor(sampler2D baseTexture, vec2 texCoords)"
          "{"
          "    vec4 color;"
          ""
          "    if (vxOSG_TexturedObject)"
          "    {"
          "        // obtain texture color at fragment"
          "        color = texture2D(baseTexture, texCoords);"
          "    }"
          "    else"
          "    {"
          "        color = vec4(1.0);"
          "    }"
          "    return color;"
          "}"
          ""
          "vec4 vertexColor(vec4 color)"
          "{"
          "    return color * vxg_vertexColor;"
          "}"
          ""
          "vec4 materialFog(vec4 color)"
          "{"
          "    if(vxOSG_FogEnabled)"
          "    {"
          "        float density = getFogDensityFromDistance( vxOSG_FogDensity );"
          "        float distance = length(vxg_FragPosition.xyz);"
          ""
          "        vec4 fog_color = vxOSG_FogColor;"
          ""
          "        const float LOG2 = 1.442695;"
          "        float fog = exp(-density * density * distance * distance * LOG2);"
          "        fog = clamp(fog, 0.0, 1.0);"
          ""
          "        // Mix the fog color with the base color with shadows."
          "        color = vec4(mix(vec3(fog_color), vec3(color), fog), color.a);"
          "    }"
          "    return color;"
          "}"
          ""
          "vec4 materialFade(vec4 color)"
          "{"
          "    float fade = clamp(gl_FragCoord.z * 16.0, 0.0, 1.0);"
          "    color = vec4(color.rgb, color.a * fade);"
          "    return color;"
          "}"
          ""
          "#endif"
          ""
          "#line 50 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          "#line 0 \"shadowMapVD_shadow.frag\""
          "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//   http://www.cm-labs.com"
          "//"
          "//   $Name: shadowMapVD_shadows.frag $"
          "//"
          "//   Date: $Date: 2012/02/29 11:01:17 $"
          "//"
          "//   This software and its accompanying manuals have been developed by CMLabs"
          "//   Simulations Inc. (\"CMLabs\")."
          "//"
          "//   The copyright to the Vortex Toolkits and all associated materials"
          "//   belongs to CMLabs."
          "//"
          "//   All intellectual property rights in the software belong to CMLabs."
          "//"
          "//   All rights conferred by law (including rights under international"
          "//   copyright conventions) are reserved to CMLabs. This software may also"
          "//   incorporate information which is confidential to CMLabs."
          "//"
          "//   Save to the extent permitted by law, or as otherwise expressly permitted"
          "//   by CMLabs, this software and the manuals must not be copied (in whole or"
          "//   in part), re-arranged, altered or adapted in any way without the prior"
          "//   written consent of CMLabs. In addition, the information contained in the"
          "//   software may not be disseminated without the prior written consent of"
          "//   CMLabs."
          ""
          "//----------------------------------------------------------------------------"
          "// Shadow fragment shader"
          "//----------------------------------------------------------------------------"
          "// following expressions are auto modified - do not change them:"
          "// vxg_TexCoord7  7 - can be subsituted with other index"
          "#if SHADOW"
          "uniform sampler2DShadow shadowTexture0;"
          "uniform int shadowTextureUnit0;"
          ""
          "// Filtering modes."
          "// Any filtering is better than no filtering, because it makes the edges of"
          "// shadows look softer. Of course, the softness is not physically correct"
          "// because the \"soft part\" (which is meant to approximate the penumbra) does"
          "// not get larger as the shadow goes away from the casting object. But it"
          "// still looks better."
          "//"
          "// The modes here are listed in order of quality, worst to best. Of course,"
          "// they are also in order of least GPU intensive to most. At low shadow map"
          "// resolutions, the 4 sample filter is merely adequate, and the 16 sample one"
          "// looks much better. But at higher shadow map resolutions, the 4 sample and"
          "// the 16 sample filters are almost identical in quality. So it's a tradeoff,"
          "// do you use a low SM resolution (512x512) and filter more, or use higher"
          "// SM resolution (2048x2048) and can filter less to still get good quality."
          ""
          "#define FILTER_NONE 0"
          "#define FILTER_4_SAMPLES 1"
          "#define FILTER_4_SAMPLES_DITHERED 2"
          "#define FILTER_16_SAMPLES 3"
          ""
          "#define FILTER_METHOD FILTER_16_SAMPLES"
          ""
          ""
          "#define XOFFSET 1.0/(1024.0*2.0)"
          "#define YOFFSET 1.0/(768.0*2.0)"
          ""
          "in vec4 shadowTextureCoord;"
          ""
          "// Helps prevent shadow acne. 0.0 is no bias; you want negative values. Too"
          "// high values (close to 0) will cause self-shadowing for some texels which"
          "// makes it look like the shadow has \"moire\" patterns on surfaces in light,"
          "// whereas too low values (far from 0) will make the shadow separate from the"
          "// base of objects. The best value might depend on the scene."
          "#define BIAS -0.000001"
          ""
          "float offset_lookup(vec4 loc, vec2 offset)"
          "{"
          "    return shadow2DProj(shadowTexture0, loc + vec4(offset.x * XOFFSET * loc.w,"
          "                                                  offset.y * YOFFSET * loc.w,"
          "                                                  BIAS,"
          "                                                  0.0) ).r;"
          "}"
          ""
          ""
          "float DynamicShadow( )"
          "{"
          "#if FILTER_METHOD == FILTER_NONE"
          "    // No filtering, single lookup - about as fast as it can get."
          "    // Will show some shadow acne, but this can't really be helped."
          "    return shadow2DProj( shadowTexture0, shadowTextureCoord ).r;"
          "#elif FILTER_METHOD == FILTER_4_SAMPLES"
          "    // This runs in about 1.5 times the GPU time of the one lookup version"
          "    // above (because of cache coherence no doubt), so there's no real"
          "    // drawback to using it (other than it looks less good than the 16 sample"
          "    // version)."
          "    // It takes advantage of the fact that shadow2DProj automatically takes 4"
          "    // samples at -0.5 to 0.5 of the given position and returns the average on"
          "    // nVidia cards. We can thus do only 4 calls at 2 pixels distance to get"
          "    // almost as good a result as 16 normal samples."
          "    float sum = 0.0;"
          ""
          "    sum += offset_lookup(shadowTextureCoord, vec2(-1.5,  0.5));"
          "    sum += offset_lookup(shadowTextureCoord, vec2( 0.5,  0.5));"
          "    sum += offset_lookup(shadowTextureCoord, vec2(-1.5, -1.5));"
          "    sum += offset_lookup(shadowTextureCoord, vec2( 0.5, -1.5));"
          ""
          "    return sum * 0.25;      // sum / 4"
          "#elif FILTER_METHOD == FILTER_4_SAMPLES_DITHERED"
          "    // About as fast as the other 4 sample method above, gives better results"
          "    // from close up but worse results (slightly pixelated) from far away."
          "    // From the Orange book."
          "    vec2 offset = mod(floor(gl_FragCoord.xy), 2.0);"
          ""
          "    float sum = 0.0;"
          ""
          "    sum += offset_lookup(shadowTextureCoord, offset + vec2(-1.5,  0.5));"
          "    sum += offset_lookup(shadowTextureCoord, offset + vec2( 0.5,  0.5));"
          "    sum += offset_lookup(shadowTextureCoord, offset + vec2(-1.5, -1.5));"
          "    sum += offset_lookup(shadowTextureCoord, offset + vec2( 0.5, -1.5));"
          ""
          "    return sum * 0.25;      // sum / 4"
          "#else   // if FILTER_METHOD == FILTER_16_SAMPLES"
          "    // Costly (roughly twice the 4 sample versions in GPU time) but looks"
          "    // really smooth."
          "    float sum = 0.0;"
          ""
          "    for (float y = -1.5; y <= 1.5; y += 1.0)"
          "        for (float x = -1.5; x <= 1.5; x += 1.0)"
          "            sum += offset_lookup(shadowTextureCoord, vec2(x, y));"
          ""
          "    return sum * 0.0625;    // sum / 16"
          "#endif"
          "}"
          ""
          "#endif"
          ""
          "#line 51 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          "#line 0 \"uber_lighting.frag\""
          "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: uber_lighting.frag $"
          "//"
          "//    Date: $Date: 2012/02/29 11:00:00 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef UBER_LIGHTING_FRAG"
          "#define UBER_LIGHTING_FRAG"
          ""
          "#line 0 \"lighting_common.glsl\""
          "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: lighting_common.glsl $"
          "//"
          "//    Date: $Date: 2012/11/01 12:17:00 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef LIGHTING_COMMON_GLSL"
          "#define LIGHTING_COMMON_GLSL"
          ""
          "// it should be fix in slave. Seems it is not included into the slave shader side."
          "#define MAX_NUM_LIGHTS 8"
          "#define MAX_NUM_PROJECTIVE_LIGHTS 2"
          ""
          "uniform int vxOSG_LightsType[MAX_NUM_LIGHTS];"
          "uniform int vxOSG_ProjectiveLightID[MAX_NUM_LIGHTS];"
          "uniform float vxOSG_SpotCosInnerCone[MAX_NUM_LIGHTS];//inner radius' cosinus"
          "uniform float vxOSG_SpotCosOuterCone[MAX_NUM_LIGHTS];//outer radius' cosinus"
          "uniform int vxOSG_ShadowCastingLight;//shadow caster light's id"
          "uniform vec4 vxOSG_LightingAmbient;"
          "uniform bool vxOSG_ShadowEnabled;"
          ""
          "uniform bool vxOSG_DepthPass;"
          ""
          "uniform float projectiveTextureMinDistance[MAX_NUM_PROJECTIVE_LIGHTS];"
          "uniform float projectiveTextureMaxDistance[MAX_NUM_PROJECTIVE_LIGHTS];"
          "uniform mat4 projectiveTextureTransform[MAX_NUM_PROJECTIVE_LIGHTS];"
          ""
          "uniform sampler2DArray projectiveLightTextureArray;"
          ""
          "// ------ Directional light -------------------------------------------------"
          "void DirectionalLight(in vec3 eyeVec,"
          "                      in vec3 normal,"
          "                      in gl_LightSourceParameters lightParameters,"
          "                      in gl_MaterialParameters material,"
          "                      inout vec3 diffuse,"
          "                      inout vec3 specular,"
          "                      in float shadowMask)"
          "{"
          "    float nDotL;         // normal . light direction"
          "    float nDotH;         // normal . light half vector"
          "    float pf;            // power factor"
          "    vec3 lightVec;       // light vector"
          "    vec3 halfVec;        // half vector"
          ""
          "    lightVec = lightParameters.position.xyz;"
          "    halfVec = normalize(lightVec + eyeVec);"
          ""
          "    nDotL = max(0.0, dot(normal, normalize(lightVec)));"
          "    nDotH = max(0.0, dot(normal, normalize(halfVec)));"
          ""
          "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
          ""
          "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL;"
          "    specular += shadowMask * lightParameters.specular.rgb * nDotL * pf;"
          "}"
          ""
          "// ------ Point light -------------------------------------------------------"
          "void PointLight(in vec3 eyeVec,"
          "                in vec3 ecPosition3,"
          "                in vec3 normal,"
          "                in gl_LightSourceParameters lightParameters,"
          "                in gl_MaterialParameters material,"
          "                inout vec3 diffuse,"
          "                inout vec3 specular,"
          "                in float shadowMask)"
          "{"
          "    float nDotL;      // normal . light direction"
          "    float nDotH;      // normal . light half vector"
          "    float pf;          // power factor"
          "    float attenuation; // computed attenuation factor"
          "    float d;           // distance from surface to light source"
          "    vec3  lightVec;          // direction from surface to light position"
          "    vec3  halfVec;  // direction of maximum highlights"
          ""
          "    // Compute vector from surface to light position"
          "    lightVec = vec3(lightParameters.position) - ecPosition3;"
          ""
          "    // Compute distance between surface and light position"
          "    d = length(lightVec);"
          ""
          "    // Normalize the vector from surface to light position"
          "    lightVec = normalize(lightVec);"
          ""
          "    // Compute attenuation"
          "    attenuation = 1.0 / (lightParameters.constantAttenuation +"
          "                         lightParameters.linearAttenuation * d +"
          "                         lightParameters.quadraticAttenuation * d*d);"
          ""
          "    halfVec = normalize(lightVec + eyeVec);"
          ""
          "    nDotL = max(0.0, dot(normal, lightVec));"
          "    nDotH = max(0.0, dot(normal, halfVec));"
          ""
          "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
          ""
          "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL * attenuation;"
          "    specular += shadowMask * lightParameters.specular.rgb * nDotL * pf * attenuation;"
          "}"
          ""
          "// ------ Spot light --------------------------------------------------------"
          "void SpotLight(in vec3 eyeVec,"
          "               in vec3 ecPosition3,"
          "               in vec3 normal,"
          "               in float cosInnerCone,"
          "               in float cosOuterCone,"
          "               in gl_LightSourceParameters lightParameters,"
          "               in gl_MaterialParameters material,"
          "               inout vec3 diffuse,"
          "               inout vec3 specular,"
          "               in float shadowMask)"
          "{"
          "    float nDotL;          // normal . light direction"
          "    float nDotH;          // normal . light half vector"
          "    float pf;              // power factor"
          "    float spotDot;         // cosine of angle between spotlight"
          "    float spotAttenuation; // spotlight attenuation factor"
          "    float attenuation;     // computed attenuation factor"
          "    float d;               // distance from surface to light source"
          "    vec3 lightVec;               // direction from surface to light position"
          "    vec3 halfVec;       // direction of maximum highlights"
          ""
          "    // Compute vector from surface to light position"
          "    lightVec = vec3(lightParameters.position) - ecPosition3;"
          ""
          "    // Compute distance between surface and light position"
          "    d = length(lightVec);"
          ""
          "    // Normalize the vector from surface to light position"
          "    lightVec = normalize(lightVec);"
          ""
          "    // Compute attenuation"
          "    attenuation = 1.0 / (lightParameters.constantAttenuation +"
          "                         lightParameters.linearAttenuation * d +"
          "                         lightParameters.quadraticAttenuation *d*d);"
          ""
          "    // See if point on surface is inside cone of illumination"
          "    spotDot = max(0.0, dot(-lightVec, normalize(lightParameters.spotDirection)));"
          ""
          "    spotAttenuation = (spotDot - cosOuterCone) / (cosInnerCone - cosOuterCone);"
          "    spotAttenuation = clamp(spotAttenuation, 0.0, 1.0);"
          ""
          "    // Combine the spotlight and distance attenuation."
          "    attenuation *= spotAttenuation;"
          ""
          "    halfVec = normalize(lightVec + eyeVec);"
          ""
          "    nDotL = max(0.0, dot(normal, lightVec));"
          "    nDotH = max(0.0, dot(normal, halfVec));"
          ""
          "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
          ""
          "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL * attenuation;"
          "    specular += shadowMask * lightParameters.specular.rgb * pf * nDotL * attenuation;"
          "}"
          ""
          "// ------ Directional light -------------------------------------------------"
          "void ProjectiveTextureLight( in vec3 eyeVec,"
          "                             in vec3 ecPosition3,"
          "                             in vec3 normal,"
          "                             in int projectiveLightID,"
          "                             in gl_LightSourceParameters lightParameters,"
          "                             in gl_MaterialParameters material,"
          "                             inout vec3 diffuse,"
          "                             inout vec3 specular )"
          "{"
          "    if(gl_TexCoord[projectiveLightID+3].q>0.0 )"
          "    {"
          ""
          "        float nDotL;          // normal . light direction"
          "        float nDotH;          // normal . light half vector"
          "        vec3 halfVec;         // direction of maximum highlights"
          "        float pf;             // power factor"
          ""
          "        vec3 lightVec;"
          "        float d;              // distance between fragment to the light source"
          ""
          "        vec2 projCoords = gl_TexCoord[projectiveLightID+3].st / gl_TexCoord[projectiveLightID+3].q;"
          "        vec3 projTextureColor0 = texture(projectiveLightTextureArray, vec3(projCoords, projectiveLightID*2 + 0)).rgb;"
          "        vec3 projTextureColor1 = texture(projectiveLightTextureArray, vec3(projCoords, projectiveLightID*2 + 1)).rgb;"
          ""
          "        mat4 m = projectiveTextureTransform[projectiveLightID];"
          "        if( m[2][3] == 0.0 )  // Orthogonal projection"
          "       {"
          "           vec3 planeNormal = normalize(lightParameters.spotDirection);"
          "           lightVec = -planeNormal; // for ortho we treat it as direction light"
          ""
          "           // d component of the plane equation"
          "           d = dot(planeNormal, (ecPosition3 - vec3(lightParameters.position)));"
          "        }"
          "        else   // Perspective projection"
          "        {"
          "            // Compute vector from surface to light position"
          "            lightVec = vec3(lightParameters.position) - ecPosition3;"
          ""
          "            // Compute distance between surface and light position"
          "            d = length(lightVec);"
          "            lightVec = lightVec / d;"
          "        }"
          ""
          "        d = clamp(d, projectiveTextureMinDistance[projectiveLightID], projectiveTextureMaxDistance[projectiveLightID]);"
          ""
          "        float blendFactor = (d - projectiveTextureMinDistance[projectiveLightID]) / ( projectiveTextureMaxDistance[projectiveLightID] - projectiveTextureMinDistance[projectiveLightID]);"
          "        vec3 color = mix(projTextureColor0, projTextureColor1, blendFactor);"
          ""
          "        halfVec = normalize(lightVec + eyeVec);"
          ""
          "        nDotL = max(0.0, dot(normal, lightVec));"
          "        nDotH = max(0.0, dot(normal, halfVec));"
          "        pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
          ""
          "        // final color"
          "        diffuse  += color * lightParameters.diffuse.rgb  * nDotL;"
          "        specular += color * pf * nDotL;"
          "    }"
          "}"
          ""
          "void lighting_accumulateLighting(vec3 vPosition, vec3 vNormal, gl_MaterialParameters material, out vec3 diffuse, out vec3 specular)"
          "{"
          "    vec3 eyeVec  = normalize(vec3(0.0, 0.0, 0.0) - vPosition); // vector from the vertex position to the eye position which is the origin in view space"
          "    vec3 normal = normalize(vNormal);"
          ""
          "    // Clear the light intensity accumulators"
          "    diffuse = specular = vec3(0.0);"
          ""
          "    const int Disabled = 0;"
          "    const int Directional = 1;"
          "    const int Point = 2;"
          "    const int Spot = 3;"
          "    const int ProjectiveTexture = 4;"
          ""
          "#if SHADOW"
          "    float shadowValue = vxOSG_ShadowEnabled ? DynamicShadow() : 1.0;"
          "#endif"
          ""
          "    #pragma optionNV(unroll all)"
          ""
          "    int i = 0;"
          "    int last = 0;"
          ""
          "    // Directional lights"
          "    last += DIRECTIONAL_LIGHT_COUNT;"
          "    for (;i < last; ++i)"
          "    {"
          "        // Adds the contribution of each lights whenever it is shadow caster or not."
          "        // Only the mask helps us to determine if it's casting shadow or not"
          "        float shadowMask = 1.0;"
          "#if SHADOW"
          "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
          "#endif"
          "        DirectionalLight(eyeVec, normal, gl_LightSource[i], material, diffuse, specular, shadowMask);"
          "    }"
          ""
          "    // Point lights"
          "    last += POINT_LIGHT_COUNT;"
          "    for (;i < last; ++i)"
          "    {"
          "        // Adds the contribution of each lights whenever it is shadow caster or not."
          "        // Only the mask helps us to determine if it's casting shadow or not"
          "        float shadowMask = 1.0;"
          "#if SHADOW"
          "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
          "#endif"
          "        PointLight(eyeVec, vPosition, normal, gl_LightSource[i], material, diffuse, specular, shadowMask);"
          "    }"
          ""
          "    // Spot lights"
          "    last += SPOT_LIGHT_COUNT;"
          "    for (;i < last; ++i)"
          "    {"
          "        // Adds the contribution of each lights whenever it is shadow caster or not."
          "        // Only the mask helps us to determine if it's casting shadow or not"
          "        float shadowMask = 1.0;"
          "#if SHADOW"
          "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
          "#endif"
          "        SpotLight(eyeVec, vPosition, normal, vxOSG_SpotCosInnerCone[i], vxOSG_SpotCosOuterCone[i], gl_LightSource[i], material, diffuse, specular, shadowMask);"
          "    }"
          ""
          "    // Projective lights"
          "    last += PROJECTIVE_LIGHT_COUNT;"
          "    for (;i < last; ++i)"
          "    {"
          "        ProjectiveTextureLight(eyeVec, vPosition, normal, vxOSG_ProjectiveLightID[i], gl_LightSource[i], material, diffuse, specular);"
          "    }"
          "}"
          ""
          "vec4 lighting_applyOnMaterial(gl_MaterialParameters material, vec4 textureColor, vec3 lightDiffuse, vec3 lightSpecular)"
          "{"
          "    // Emissive contribution"
          "    vec3 emissive = material.emission.rgb;"
          "    "
          "    // Ambient contribution"
          "    vec3 ambient = vxOSG_LightingAmbient.rgb * material.ambient.rgb;"
          "    "
          "    // Diffuse contribution"
          "    vec3 diffuse = lightDiffuse.rgb * material.diffuse.rgb;"
          ""
          "    // Specular contribution"
          "    vec3 specular = lightSpecular.rgb * material.specular.rgb;"
          ""
          "    // Total contribution (Maya model)"
          "    vec3 diffuseTextured = emissive + ambient + diffuse;"
          "    vec3 notDiffuseTextured = specular;"
          "    "
          "    // We keep the color and alpha components separate for readability."
          "    vec4 color = vec4("
          "        textureColor.rgb * diffuseTextured + notDiffuseTextured,"
          "        textureColor.a * material.diffuse.a);"
          "    return color;"
          "}"
          ""
          "vec4 lighting_implementation(in vec3 vPosition, in vec3 vNormal, in vec4 textureColor, in gl_MaterialParameters material, in bool enableShadows)"
          "{"
          "    if(!vxOSG_DepthPass)"
          "    {"
          "        // Compute the contribution for each light."
          "        vec3 diffuse, specular;"
          "        lighting_accumulateLighting(vPosition, vNormal, material, diffuse, specular);"
          "        return lighting_applyOnMaterial(material, textureColor, diffuse, specular);"
          "    }"
          "    else"
          "    {"
          "        return vec4(textureColor);"
          "    }"
          "}"
          ""
          "#endif"
          ""
          "#line 31 \"uber_lighting.frag\""
          ""
          "in vec3 vNormal;"
          "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
          "in vec3 vTangent;"
          "#endif"
          "in vec3 vecPosition3;"
          ""
          "uniform bool vxOSG_LightingEnabled;"
          ""
          "vec3 getPosition()"
          "{"
          "    return vecPosition3;"
          "}"
          ""
          "vec3 getNormal()"
          "{"
          "    return normalize(vNormal);"
          "}"
          ""
          "#if MATERIAL && NORMAL_MAP"
          "// http://www.thetenthplanet.de/archives/1180"
          "// This function generates a tangent space using partial derivatives of position"
          "// and texture coordinates instead of precomputed vertex attributes. It is a"
          "// little more expansive than tangent space vertex attributes but some tests"
          "// have shown that the overhead was close to nothing. It can be used in cases"
          "// where the tangent space is too expansive or complex to generate on the CPU"
          "// like procedural geometry."
          "mat3 cotangent_frame( vec3 N, vec3 p, vec2 uv )"
          "{"
          "    // get edge vectors of the pixel triangle"
          "    vec3 dp1 = dFdx( p );"
          "    vec3 dp2 = dFdy( p );"
          "    vec2 duv1 = dFdx( uv );"
          "    vec2 duv2 = dFdy( uv );"
          " "
          "    // solve the linear system"
          "    vec3 dp2perp = cross( dp2, N );"
          "    vec3 dp1perp = cross( N, dp1 );"
          "    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;"
          "    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;"
          ""
          "    // construct a scale-invariant frame"
          "    float scaleMax = max( dot(T,T), dot(B,B) );"
          "    scaleMax = max(scaleMax, 1e-20);  // Add small value to avoid division by zero"
          "    float invmax = inversesqrt( scaleMax );"
          "    return mat3( T * invmax, B * invmax, N );"
          "}"
          ""
          "vec3 normalMapping(sampler2D normalmap, in vec2 texCoords, in float amount)"
          "{"
          "    vec4 normalMapColor = texture2D(normalmap, texCoords) * 2.0 - 1.0;"
          "    normalMapColor.g = -normalMapColor.g;   // Use left handed convention"
          "#if 0 // There are a few problems with the DXT compression hack, turn off for now"
          "    // This trick works for DXT1nm and DXT5nm normal maps (nvcompress -bc1n or -bc3n)"
          "    // It relies on the fact that : "
          "    //   - DXT1nm stores X in R and Y in G, but sets alpha to 1"
          "    //   - DXT5nm stores X in alpha and Y in G, but sets R to 1"
          "    // It will also work for normal maps stored in RGBA textures as long as "
          "    // the alpha channel is set to all white. For RGB textures, alpha is set "
          "    // to white by OpenGL (since they're considered all opaque)."
          "    // See: http://code.google.com/p/nvidia-texture-tools/wiki/NormalMapCompression"
          "    vec3 normal = vec3(normalMapColor.r * normalMapColor.a, normalMapColor.g, 1.0);"
          "    normal.z = sqrt(max(0.0, 1.0 - dot(normal.xy, normal.xy)));"
          "#else"
          "    vec3 normal = normalize(normalMapColor.rgb);"
          "#endif"
          "    normal = normalize(normal * vec3(sign(amount), sign(amount), 1.0 / abs(amount)));"
          ""
          "    // Transform normal from tangent space to world space"
          "    // As the basis is orthogonal, tangent space inverse is the transpose of the tangent space basis"
          "#if !GENERATE_TANGENT_SPACE"
          "    vec3 normalT = normalize(vNormal);"
          "    vec3 tangentT = normalize(vTangent);"
          "    vec3 bitangentT = cross(normalT, tangentT);"
          "    normal = tangentT.xyz * normal.x + bitangentT.xyz * normal.y + normalT.xyz * normal.z;"
          "#else"
          "    vec3 N = normalize(vNormal);"
          "    mat3 TBN = cotangent_frame(N, normalize(vecPosition3), texCoords);"
          "    normal = TBN * normal;"
          "#endif"
          ""
          "    return normal;"
          "}"
          "#endif"
          ""
          "vec4 lightingPipeline(vec4 color, gl_MaterialParameters material, vec3 normal)"
          "{"
          "    if (vxOSG_LightingEnabled)"
          "    {"
          "        color = lighting_implementation(vecPosition3, normal, color, material, true);"
          "    }"
          "    else "
          "    {"
          "        color = material.diffuse * color;"
          "    }"
          ""
          "    return color;"
          "}"
          ""
          "#endif"
          ""
          "#line 52 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          "#line 0 \"triPlanar_common.frag\""
          "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
          "//"
          "//    http://www.cm-labs.com"
          "//"
          "//    $Name: triPlanar_common.frag shader for marching cubes $"
          "//"
          "//    Date: $Date: 2012/02/28 12:52:0 $"
          "//"
          "//    This software and its accompanying manuals have been developed by CMLabs"
          "//    Simulations Inc. (\\\"CMLabs\\\")."
          "//"
          "//    The copyright to the Vortex Toolkits and all associated materials"
          "//    belongs to CMLabs."
          "//"
          "//    All intellectual property rights in the software belong to CMLabs."
          "//"
          "//    All rights conferred by law (including rights under international"
          "//    copyright conventions) are reserved to CMLabs. This software may also"
          "//    incorporate information which is confidential to CMLabs."
          "//"
          "//    Save to the extent permitted by law, or as otherwise expressly permitted"
          "//    by CMLabs, this software and the manuals must not be copied (in whole or"
          "//    in part), re-arranged, altered or adapted in any way without the prior"
          "//    written consent of CMLabs. In addition, the information contained in the"
          "//    software may not be disseminated without the prior written consent of"
          "//    CMLabs."
          ""
          "#ifndef TRIPLANAR_COMMMON_FRAG"
          "#define TRIPLANAR_COMMMON_FRAG"
          ""
          ""
          "#if TRIPLANAR"
          "in vec3 triplanarPosition;"
          "in vec3 triplanarNormal;"
          ""
          "// commented out parallax mapping"
          "// OPTION: set to 0 to disable parallax"
          "//float parallaxScale = 0.01;  // 0.03 or    0.025"
          "//float parallaxBias = -0.01;   // -0.025 or -0.02"
          ""
          "uniform vec3 triplanarTextureScaling;"
          ""
          "void computeTexCoordTriplanar(in vec3 position, out vec2 texCoordProjX, out vec2 texCoordProjY, out vec2 texCoordProjZ)"
          "{"
          "    // Apply scaling"
          "    vec3 coordTriplanar = position * triplanarTextureScaling;"
          ""
          "    // Return projection planes"
          "    texCoordProjX = coordTriplanar.yz;"
          "    texCoordProjY = coordTriplanar.zx;"
          "    texCoordProjZ = coordTriplanar.xy;"
          "}"
          ""
          "void computeTexCoordTriplanar_flowAnim(in vec3 position, in vec2 texScale, out vec2 texCoordProjX, out vec2 texCoordProjY, out vec2 texCoordProjZ)"
          "{"
          "    // planar projections"
          "    vec3 uCoordTriplanar = texScale.x * vec3(position.y, position.z, position.x);"
          "    vec3 vCoordTriplanar = texScale.y * vec3(position.z, position.x, position.y);"
          "    texCoordProjX = vec2(uCoordTriplanar.x, vCoordTriplanar.x);"
          "    texCoordProjY = vec2(uCoordTriplanar.y, vCoordTriplanar.y);"
          "    texCoordProjZ = vec2(uCoordTriplanar.z, vCoordTriplanar.z);"
          "}"
          ""
          "//"
          "//      Triplanar diffuse"
          "//"
          "vec4 triPlanarDiffuseLookup(in sampler2D diffuse)"
          "{"
          "    // ----------------------------------------------------------------"
          "    // OPTION: regular diffuse mapping"
          "    //return texture2D(diffuse, (position.xy + textureShiftX) * textureScaleX);"
          "    //return normalize(texture2D(diffuse, (position.xy + textureShiftX) * textureScaleX).rgb   * 2.0 - 1.0);"
          "    // ----------------------------------------------------------------"
          ""
          "    // ----------------------------------------------------------------"
          "    // OPTION: regular diffuse mapping with parallax"
          "    //float height = 0;//texture2D(heightMap, (position.xy + textureShiftX) * textureScaleX).r * parallaxScale + parallaxBias;"
          "    //return texture2D(diffuse, (position.xy + textureShiftX + (height*vEyeVec.xy)) * textureScaleX);"
          "    // ----------------------------------------------------------------"
          ""
          "    vec3 weights = abs(triplanarNormal);"
          "    "
          "    //  adjustment for blending zone"
          "    weights = (weights - 0.2) * 7.0;"
          "    weights = pow(weights, vec3(4.0));"
          "    weights = max(weights, 0.0001);"
          ""
          "    //  normalize weights"
          "    weights /= weights.x + weights.y + weights.z;"
          ""
          "    vec2 texCoordProjX, texCoordProjY, texCoordProjZ;"
          "    computeTexCoordTriplanar(triplanarPosition, texCoordProjX, texCoordProjY, texCoordProjZ);"
          ""
          "    vec4 color0 = texture2D(diffuse, texCoordProjX);"
          "    vec4 color1 = texture2D(diffuse, texCoordProjY);"
          "    vec4 color2 = texture2D(diffuse, texCoordProjZ);"
          ""
          "    //  blending in the projections to smooth out result"
          "    return color0 * weights.xxxx +"
          "        color1 * weights.yyyy +"
          "        color2 * weights.zzzz;"
          "}"
          ""
          "//"
          "//      Triplanar diffuse (flow animation version)"
          "//"
          "vec4 triPlanarDiffuseLookup_flowAnim(in vec2 texScale, in vec2 texOffset, in sampler2D diffuse)"
          "{"
          "    // ----------------------------------------------------------------"
          "    // OPTION: regular diffuse mapping"
          "    //return texture2D(diffuse, (position.xy + textureShiftX) * textureScaleX);"
          "    //return normalize(texture2D(diffuse, (position.xy + textureShiftX) * textureScaleX).rgb   * 2.0 - 1.0);"
          "    // ----------------------------------------------------------------"
          ""
          "    // ----------------------------------------------------------------"
          "    // OPTION: regular diffuse mapping with parallax"
          "    //float height = 0;//texture2D(heightMap, (position.xy + textureShiftX) * textureScaleX).r * parallaxScale + parallaxBias;"
          "    //return texture2D(diffuse, (position.xy + textureShiftX + (height*vEyeVec.xy)) * textureScaleX);"
          "    // ----------------------------------------------------------------"
          ""
          "    vec3 weights = abs(triplanarNormal);"
          "    "
          "    //  adjustment for blending zone"
          "    weights = (weights - 0.2) * 7.0;"
          "    weights = pow(weights, vec3(7.0));"
          "    weights = max(weights, 0.0001);"
          ""
          "    //  normalize weights"
          "    weights /= weights.x + weights.y + weights.z;"
          ""
          "    vec2 texCoordProjX, texCoordProjY, texCoordProjZ;"
          "    computeTexCoordTriplanar_flowAnim(triplanarPosition, texScale, texCoordProjX, texCoordProjY, texCoordProjZ);"
          ""
          "    vec4 color0 = texture2D(diffuse, texCoordProjX + vec2(0, triplanarNormal.x < 0 ? texOffset.x : -texOffset.x));"
          "    vec4 color1 = texture2D(diffuse, texCoordProjY + vec2(triplanarNormal.y < 0 ? texOffset.y : -texOffset.y, 0));"
          "    vec4 color2 = texture2D(diffuse, texCoordProjZ + weights.z * texOffset); // OK!"
          ""
          "    return color0 * weights.xxxx +"
          "           color1 * weights.yyyy +"
          "           color2 * weights.zzzz;"
          "}"
          ""
          "//"
          "//      Triplanar normal mapping on a specified plane"
          "//"
          "vec3 triPlanarNormalMapping(sampler2D normalmap, vec2 texCoords, vec3 tangentT, vec3 bitangentT, vec3 normalT)"
          "{"
          "    vec3 normal = normalize(texture2D(normalmap, texCoords).xyz * 2.0 - 1.0);"
          "    //normal = vec3(0, 0, 1);   // Uncomment to disable the normal map"
          ""
          "    normal = normalize(tangentT.xyz * normal.x + bitangentT.xyz * normal.y + normalT.xyz * normal.z);"
          ""
          "    return normal;"
          "}"
          ""
          "//"
          "//      Triplanar bump"
          "//"
          "vec3 triPlanarBumpLookup(in sampler2D bump)"
          "{"
          "    // ----------------------------------------------------------------"
          "    // OPTION: disable normal mapping"
          "    //return vec3(0,0,1);"
          "    // ----------------------------------------------------------------"
          ""
          "    // ----------------------------------------------------------------"
          "    // OPTION: regular normal mapping (no triplanar)"
          "    //float height = texture2D(heightMap, (position.xy + textureShiftX) * textureScaleX).r * parallaxScale + parallaxBias;"
          "    //return normalize(texture2D(bump, (position.xy + textureShiftX + (height*vEyeVec.xy)) * textureScaleX).rgb  * 2.0 - 1.0);"
          ""
          "    // no parallax:"
          "    //return normalize(texture2D(bump, (position.xy + textureShiftX) * textureScaleX).rgb * 2.0 - 1.0);"
          "    // ----------------------------------------------------------------"
          ""
          "    // Compute weights as a combination of normal and dominant normal direction"
          "    float blendFactor = 0.95;   // Should be tweakable"
          "    vec3 dominantNormal = normalize(triplanarNormal * triplanarNormal * triplanarNormal); // Gives a higher relative weight to the dominent component"
          "    vec3 weights = normalize(mix(triplanarNormal, dominantNormal, blendFactor));"
          ""
          "    // Get the 3 axis to be used as reference for the 3 projection"
          "    // planes from the view space normal matrix"
          "    // No need to normalize vectors if the matrix is orthogonal"
          "    mat3 triplanarMatrix = gl_NormalMatrix;"
          "    vec3 triplanarAxisX = triplanarMatrix[0];"
          "    vec3 triplanarAxisY = triplanarMatrix[1];"
          "    vec3 triplanarAxisZ = triplanarMatrix[2];"
          ""
          "    // Compute the texture coordinates"
          "    vec2 texCoordProjX, texCoordProjY, texCoordProjZ;    "
          "    computeTexCoordTriplanar(triplanarPosition, texCoordProjX, texCoordProjY, texCoordProjZ);"
          "    "
          "    vec3 normal0 = triPlanarNormalMapping(bump, texCoordProjX, triplanarAxisY, triplanarAxisZ, triplanarAxisX);"
          "    vec3 normal1 = triPlanarNormalMapping(bump, texCoordProjY, triplanarAxisZ, triplanarAxisX, triplanarAxisY);"
          "    vec3 normal2 = triPlanarNormalMapping(bump, texCoordProjZ, triplanarAxisX, triplanarAxisY, triplanarAxisZ);"
          ""
          "    // Realign positive weights with normal direction on each axis"
          "    weights = abs(weights) * sign(triplanarNormal);"
          ""
          "    vec3 outputNormal = normalize("
          "        normal0 * weights.x"
          "        + normal1 * weights.y "
          "        + normal2 * weights.z);"
          ""
          "    return outputNormal;"
          "}"
          ""
          "#endif"
          ""
          "#endif"
          ""
          ""
          "#line 53 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          "#line 0 \"flowAnim_common.glsl\""
          "#ifndef FLOW_ANIM_COMMON_GLSL"
          "#define FLOW_ANIM_COMMON_GLSL"
          ""
          "#if TRIPLANAR && FLOW_ANIM"
          ""
          "vec2 getDUDV(sampler2D dudvSampler,"
          "             vec4      texCoord  // in the range [0, 1] for the whole terrain (not just one tile)"
          "             )"
          "{"
          "    //  truncate texCoord on \"integer\" multiples of overlayDUDVResolution"
          "    vec4 uvTruncated = floor(texCoord / overlayDUDVResolution) * overlayDUDVResolution;"
          "    vec4 dudv        = texture2D(dudvSampler, uvTruncated.st);"
          ""
          "    return dudv.ra; // offset is encoded in r and a (luminance, alpha)"
          "}"
          ""
          "vec4 flowAnimColor(in vec4 color)"
          "{"
          "    // mix color of main texture with overlay texture. used for flow animation"
          "    // centroid version:"
          "    vec2 dudv = getDUDV(overlayDUDVTexture, dudvTexCoord);"
          ""
          "    // obtain color from overlay texture"
          "    vec4 color2 = triPlanarDiffuseLookup_flowAnim(triPlanarOverlayTexScale, dudv, overlayTexture);"
          ""
          "    // mix obtained color with overlayColor using mix factor"
          "    if (overlayColorMix > 0.0)"
          "        color2 = vec4(mix(color2.rgb, overlayColor, overlayColorMix), color.a);"
          ""
          "    color = vec4(mix(color.rgb, color2.rgb, overlayMix), color.a);"
          ""
          "    return color;"
          "}"
          ""
          "#endif"
          ""
          "#if HEIGHT_FIELD_BLENDING && FLOW_ANIM"
          ""
          "uniform sampler2D flowMap;"
          "uniform float osg_FrameTime;"
          ""
          "vec4 computeFlowAnimation(sampler2D textureSampler, vec2 diffuseTexCoord, vec2 flowTexCoord)"
          "{"
          "    float numTiles = 32;"
          ""
          "    float myTime = osg_FrameTime;"
          ""
          "    float mixU = fract(diffuseTexCoord.x);"
          "    float mixV = fract(diffuseTexCoord.y);"
          ""
          "    vec2 myTexCoord = floor(flowTexCoord * numTiles);"
          "    vec2 baseAA = myTexCoord;"
          "    vec2 baseBA = myTexCoord + vec2(1, 0);"
          "    vec2 baseAB = myTexCoord + vec2(0, 1);"
          "    vec2 baseBB = myTexCoord + vec2(1, 1);"
          ""
          "    // Flow"
          "    vec2 flowAA = texture(flowMap, baseAA / numTiles).rg;"
          "    vec2 flowBA = texture(flowMap, baseBA / numTiles).rg;"
          "    vec2 flowAB = texture(flowMap, baseAB / numTiles).rg;"
          "    vec2 flowBB = texture(flowMap, baseBB / numTiles).rg;"
          ""
          "    float epsilon = 0.001;"
          "    float vAA = max(length(flowAA) - epsilon, 0);"
          "    float vBA = max(length(flowBA) - epsilon, 0);"
          "    float vAB = max(length(flowAB) - epsilon, 0);"
          "    float vBB = max(length(flowBB) - epsilon, 0);"
          ""
          "    flowAA /= vAA + epsilon;"
          "    flowBA /= vBA + epsilon;"
          "    flowAB /= vAB + epsilon;"
          "    flowBB /= vBB + epsilon;"
          ""
          "    mat2 rotmatAA = mat2(flowAA.x, flowAA.y, -flowAA.y, flowAA.x);"
          "    mat2 rotmatBA = mat2(flowBA.x, flowBA.y, -flowBA.y, flowBA.x);"
          "    mat2 rotmatAB = mat2(flowAB.x, flowAB.y, -flowAB.y, flowAB.x);"
          "    mat2 rotmatBB = mat2(flowBB.x, flowBB.y, -flowBB.y, flowBB.x);"
          ""
          "    // Displacement at each vertex"
          "    vec2 offset = vec2(myTime, 0);"
          "    vec2 dispAA = rotmatAA * diffuseTexCoord - offset * vAA;"
          "    vec2 dispBA = rotmatBA * diffuseTexCoord - offset * vBA;"
          "    vec2 dispAB = rotmatAB * diffuseTexCoord - offset * vAB;"
          "    vec2 dispBB = rotmatBB * diffuseTexCoord - offset * vBB;"
          ""
          "    // Color"
          "    vec4 colAA = texture(textureSampler, dispAA);"
          "    vec4 colBA = texture(textureSampler, dispBA);"
          "    vec4 colAB = texture(textureSampler, dispAB);"
          "    vec4 colBB = texture(textureSampler, dispBB); "
          ""
          "    vec4 colA = mix(colAA, colBA, mixU);"
          "    vec4 colB = mix(colAB, colBB, mixU);"
          "    vec4 colorFinal = mix(colA, colB, mixV);"
          ""
          "    return colorFinal;"
          "}"
          "#endif"
          ""
          "#endif"
          ""
          "#line 54 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/uber_material.frag\""
          ""
          "in vec4 vxg_TexCoord0;"
          ""
          "#if HEIGHT_FIELD_BLENDING"
          "in vec4 heightFieldElevation;"
          "uniform float heightFieldBlendRange;"
          "uniform float heightFieldBlendBias;"
          "uniform mat4 unitCubeToHeightField;"
          "#endif"
          ""
          "#if TERRAIN_BLENDING"
          "in vec3 terrainX;"
          "in vec3 terrainY;"
          "in float terrainBlendMask;"
          "uniform vec3 terrainSize;"
          "#endif"
          ""
          "#if NORMAL_MAP"
          "uniform float bumpAmount;"
          "#endif"
          ""
          "#if SPECULAR_MAP"
          "uniform float specularAmount;"
          "#endif"
          ""
          "#if INSTANCING"
          "in vec4 materialDiffuse;"
          "#endif"
          ""
          "#if HOLES"
          "in vec4 holesX;"
          "in vec4 holesY;"
          "#endif"
          ""
          "#if PARTICLES"
          "in vec2 vertexTextureCoordinate;"
          "in vec4 ndcPosition;"
          "in vec4 viewPosition;"
          ""
          "uniform sampler2D depthSampler;"
          ""
          "uniform float constantZThreshold;"
          "uniform float linearZThreshold;"
          "uniform float depthTextureSize;"
          "uniform vec4 viewportTransform;"
          ""
          "vec2 computeTexCoordFromWindowSpace()"
          "{"
          "    return gl_FragCoord.xy / vec2(depthTextureSize);"
          "}"
          ""
          "vec3 windowSpaceToViewPos(in float zNDC)"
          "{"
          "    float zVal = zNDC * 2.0 - 1.0;"
          "    vec4 vScreenPosition = ndcPosition;"
          "    vScreenPosition.xyzw /= vScreenPosition.w;"
          "    "
          "    // Back project depth buffer position to view space"
          "    vScreenPosition.z = zVal;"
          "    vScreenPosition = (osg_ProjectionMatrixInverse * vScreenPosition);"
          "    vScreenPosition /= vScreenPosition.w;"
          "    return vScreenPosition.xyz;"
          "}"
          "#endif"
          ""
          "// ------ Main --------------------------------------------------------------"
          "void main()"
          "{"
          "#if HOLES && !HEIGHT_FIELD_EDITION_MODE"
          "    // Discard any fragment inside a hole"
          "    for (int hole = 0; hole < HOLES; ++hole)"
          "    {"
          "        if ((abs(holesX[hole]) < 1) && (abs(holesY[hole]) < 1))"
          "            discard;"
          "    }"
          "#endif"
          ""
          "    // Configure material"
          "    gl_MaterialParameters material = gl_FrontMaterial;"
          "#if TRIPLANAR"
          "    material.diffuse = vec4(1.0);"
          "    #if SPECULAR_MAP"
          "        material.specular = vec4(1.0);"
          "    #else "
          "        material.specular = vec4(0.0);"
          "    #endif"
          "#endif"
          ""
          "#if INSTANCING"
          "    material.diffuse = materialDiffuse;"
          "#endif"
          ""
          "#if SPECULAR_MAP"
          "    #if MATERIAL"
          "        material.specular *= vec4(texture2D( texture2, vxg_TexCoord0.xy ).rgb * specularAmount, 1.0);"
          "    #elif TRIPLANAR"
          "        material.specular *= vec4(triPlanarDiffuseLookup(texture2).rgb * specularAmount, 1.0);"
          "    #endif"
          "#endif"
          "    // Local variable"
          "    vec4 color = vec4(1.0);"
          "    vec3 normal;"
          ""
          "#if TRIPLANAR_BLENDING"
          "    float blendFactor = texture2D(texture6, vxg_TexCoord0.xy).r;"
          "#endif"
          ""
          "    // Diffuse material"
          "#if HEIGHT_FIELD_BLENDING && FLOW_ANIM"
          "    color = computeFlowAnimation(texture0, vxg_TexCoord0.xy, vxg_TexCoord0.zw);"
          "#elif MATERIAL && DIFFUSE_MAP"
          "    color = materialColor(texture0, vxg_TexCoord0.xy);"
          "#endif"
          ""
          "#if TRIPLANAR && DIFFUSE_MAP"
          "    #if TRIPLANAR_BLENDING"
          "        if (blendFactor < 0.99999)"
          "        {"
          "            vec4 colorTriPlanar = triPlanarDiffuseLookup(texture3);"
          "            color = mix(colorTriPlanar, color, blendFactor);"
          "        }"
          "    #else"
          "        color = triPlanarDiffuseLookup(texture0);"
          "    #endif"
          "#endif"
          ""
          "    // Normal material"
          "#if MATERIAL && NORMAL_MAP"
          "    normal = normalMapping(texture1, vxg_TexCoord0.xy, bumpAmount);"
          "#else"
          "    normal = getNormal();"
          "#endif"
          ""
          "#if TRIPLANAR && NORMAL_MAP"
          "    #if TRIPLANAR_BLENDING"
          "        if (blendFactor < 0.99999)"
          "        {"
          "            vec3 normalTriPlanar = triPlanarBumpLookup(texture4);"
          "            normal = normalize(mix(normalTriPlanar, normal, blendFactor));"
          "        }"
          "    #else"
          "        normal = triPlanarBumpLookup(texture1);"
          "    #endif"
          "#endif"
          ""
          "#if HEIGHT_FIELD_BLENDING"
          "    // Get high res terrain elevation by reconstructing the z component in the depth texture"
          "    float terrainElevationHiResSample = texture2D(texture6, vxg_TexCoord0.zw).r;"
          "    vec4 heightFieldPos4 = unitCubeToHeightField * vec4(vxg_TexCoord0.z, vxg_TexCoord0.w, -terrainElevationHiResSample*2+1, 1);"
          "    vec3 heightFieldPos = heightFieldPos4.xyz / heightFieldPos4.w;"
          "    float terrainElevationHiRes = heightFieldPos.z;"
          ""
          "    // Get low res terrain elevation from the vertex shader"
          "    float terrainElevationLoRes = heightFieldElevation.y;"
          ""
          "    // Select the best terrain elevation from the two"
          "    float terrainElevation = max(terrainElevationHiRes, terrainElevationLoRes);"
          ""
          "    // Compute blending using best terrain elevation"
          "    float heightFieldBlendingFinal = (heightFieldElevation.x - terrainElevation - heightFieldBlendBias) / heightFieldBlendRange;"
          "    color.a = clamp(heightFieldBlendingFinal, 0, 1);"
          "#endif"
          "#if TERRAIN_BLENDING"
          "    // Get the diffuse map from the baked terrain"
          "    vec4 terrainColor = texture2D(texture3, vxg_TexCoord0.zw);"
          ""
          "    // Get the normal map from the baked terrain"
          "    vec3 terrainNormalTS = texture2D(texture4, vxg_TexCoord0.zw).rgb * 2 - 1;"
          "    terrainNormalTS /= terrainSize;"
          "    vec3 terrainZ = cross(terrainX, terrainY);"
          "    vec3 terrainNormalVS = normalize(terrainNormalTS.x * terrainX + terrainNormalTS.y * terrainY + terrainNormalTS.z * terrainZ);"
          ""
          "    // Get the specular from the baked terrain"
          "    vec4 specularSample = texture2D(texture5, vxg_TexCoord0.zw);"
          ""
          "    // Blend height field material with baked terrain material"
          "    color = mix(terrainColor, color, terrainBlendMask);"
          "    normal = normalize(mix(terrainNormalVS, normal, terrainBlendMask));"
          "    material.specular.rgb = mix(specularSample.rgb, material.specular.rgb, terrainBlendMask);"
          "    material.shininess = mix(specularSample.a * 128.0, material.shininess, terrainBlendMask);"
          "#endif"
          "#if HOLES && HEIGHT_FIELD_EDITION_MODE"
          "    // Discard any fragment inside a hole"
          "    for (int hole = 0; hole < HOLES; ++hole)"
          "    {"
          "        if ((abs(holesX[hole]) < 1) && (abs(holesY[hole]) < 1))"
          "        {"
          "            // We are in a hole, mix surface color with visualization color"
          "            color = mix(color, vec4(1.0, 0.0, 0.0, 1.0), 0.5);"
          "            break;"
          "        }"
          "    }"
          "#endif"
          ""
          "#if OUTPUT_GBUFFER"
          "    gl_FragData[0] = vec4(normal * 0.5 + 0.5, 1);"
          "    gl_FragData[1] = vec4(material.diffuse.rgb * color.rgb, 1);"
          "    gl_FragData[2] = vec4(material.specular.rgb, material.shininess / 128.0);"
          "#else"
          "    color = lightingPipeline(color, material, normal);"
          "    color = vertexColor(color);"
          "    color = materialFog(color);"
          "    gl_FragColor = color;"
          "#endif"
          ""
          "    // Particles"
          "#if USE_SOFT_PARTICLES"
          "    {"
          "        vec2 texcoord = computeTexCoordFromWindowSpace();"
          "        float zScene = texture(depthSampler, texcoord.xy).r;"
          "        zScene = -windowSpaceToViewPos(zScene).z;"
          "            "
          "        float zFrag = -windowSpaceToViewPos(gl_FragCoord.z).z;"
          "                    "
          "        float scale = 0.8;"
          "        float alpha = clamp(scale * abs(zScene - zFrag), 0.0, 1.0);"
          "        gl_FragColor.a *= alpha;"
          "    }"
          "#endif"
          "#if USE_DECAL_PARTICLES"
          "    {"
          "        vec2 texcoord = computeTexCoordFromWindowSpace();"
          "        float zScene = texture2D(depthSampler, texcoord.xy).r;"
          "            "
          "        // depth buffer's depth"
          "        vec3 depthPos = windowSpaceToViewPos(zScene);"
          "        float depthDist = length(depthPos);"
          "            "
          "        // particle's depth"
          "        float particleDist = length(viewPosition.xyz / viewPosition.w);"
          "            "
          "        float zThreshold = constantZThreshold + particleDist * linearZThreshold;"
          "        float diff = depthDist - particleDist;"
          "        gl_FragColor.a = diff > 0 ? (mix(gl_FragColor.a, 0, clamp(diff / zThreshold, 0, 1))) : 0; "
          "    }"
          "#endif"
          "}"
          ""
          "#endif"
        }
      }
    }
    textureUnit 0 {
      GL_TEXTURE_1D OFF
      GL_TEXTURE_2D ON
      GL_TEXTURE_3D OFF
      Texture2D {
        wrap_s REPEAT
        wrap_t REPEAT
        wrap_r CLAMP
        min_filter NEAREST
        mag_filter NEAREST
        maxAnisotropy 16
        borderColor 0 0 0 0
        borderWidth 0
        useHardwareMipMapGeneration TRUE
        unRefImageDataAfterApply FALSE
        internalFormatMode USE_IMAGE_DATA_FORMAT
        resizeNonPowerOfTwo TRUE
        shadowComparison FALSE
        shadowCompareFunc GL_LEQUAL
        shadowTextureMode GL_LUMINANCE
      }
    }
  }
  UpdateCallbacks {
    NodeCallback {
      UniqueID NodeCallback_8
    }
  }
  num_children 6
  Group {
    UniqueID Group_9
    DataVariance DYNAMIC
    name "ShapeGeneratorOSG::Root"
    nodeMask 0xffffffff
    cullingActive TRUE
    StateSet {
      UniqueID StateSet_10
      DataVariance STATIC
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      Uniform {
        UniqueID Uniform_11
        name "vxOSG_TexturedObject"
        type bool 1 IntArray 1
        {
          1 
        }
      }
      Uniform {
        UniqueID Uniform_12
        name "vxOSG_ShadowEnabled"
        type bool 1 IntArray 1
        {
          1 
        }
      }
    }
    num_children 2
    Group {
      UniqueID Group_13
      DataVariance DYNAMIC
      name "ShapeGeneratorOSG::BufferGroup"
      nodeMask 0x0
      cullingActive TRUE
      StateSet {
        UniqueID StateSet_14
        DataVariance STATIC
        rendering_hint DEFAULT_BIN
        renderBinMode INHERIT
        Uniform {
          name "specularFactor"
          type float 1 FloatArray 1
          {
            0 
          }
        }
        Uniform {
          name "ambientFactor"
          type float 1 FloatArray 1
          {
            0.8 
          }
        }
      }
      num_children 6
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_15
        DataVariance DYNAMIC
        name "ShapeGenerator::mOpaque"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_16
          DataVariance DYNAMIC
          name "ShapeGenerator::OpaqueStateSet"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 50
          binName RenderBin
          Program {
            UniqueID Program_17
            name "CompiledProgram_7"
            GeometryVerticesOut 1
            GeometryInputType TRIANGLES
            GeometryOutputType TRIANGLE_STRIP
            AttribBindingLocation osg_Color 3
            AttribBindingLocation osg_FogCoord 5
            AttribBindingLocation osg_Normal 2
            AttribBindingLocation osg_SecondaryColor 4
            AttribBindingLocation osg_Vertex 0
            num_shaders 2
            Shader {
              type VERTEX
              code {
                "#define DIRECTIONAL_LIGHT_COUNT 1"
                "#define POINT_LIGHT_COUNT 0"
                "#define PROJECTIVE_LIGHT_COUNT 0"
                "#define SPOT_LIGHT_COUNT 0"
                "#define STIPPLE_PATTERN 0"
                ""
                "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/ui_lit.vert\""
                "#version 330 compatibility"
                ""
                "uniform mat4 osg_ViewMatrix;"
                "uniform mat4 osg_ModelViewProjectionMatrix;"
                "uniform mat3 osg_NormalMatrix;"
                ""
                "uniform vec4 color;"
                ""
                "out vec4 colorV;"
                "out vec3 normal;"
                "attribute vec4 osg_Vertex;"
                "attribute vec3 osg_Normal;"
                "attribute vec4 osg_Color;"
                ""
                "void main()"
                "{"
                "   colorV = color * osg_Color;"
                "   gl_Position = osg_ModelViewProjectionMatrix * osg_Vertex;"
                "   normal = normalize(osg_NormalMatrix * osg_Normal);"
                "}"
              }
            }
            Shader {
              type FRAGMENT
              code {
                "#define DIRECTIONAL_LIGHT_COUNT 1"
                "#define POINT_LIGHT_COUNT 0"
                "#define PROJECTIVE_LIGHT_COUNT 0"
                "#define SPOT_LIGHT_COUNT 0"
                "#define STIPPLE_PATTERN 0"
                ""
                "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/ui_lit.frag\""
                "#version 330 compatibility"
                "in vec4 colorV;"
                "in vec3 normal;"
                "in vec4 gl_FragCoord;"
                "out vec4 outputColor;"
                "uniform float ambientFactor;"
                "uniform float specularFactor;"
                ""
                "const vec3 lightVec = normalize(vec3(-0.3,0.5,1));"
                "const vec3 eyeVec = vec3(0,0,1);"
                "const vec3 halfVec = normalize(lightVec + eyeVec);"
                ""
                "void main()"
                "{"
                "    vec3 n = normalize(normal);"
                "    float nDotL = max(0.0, dot(n, lightVec));"
                "    float nDotH = pow(max(0.0, dot(n, halfVec)), 20);"
                ""
                "    vec3 outColor = colorV.rgb * mix(ambientFactor, 1.0, nDotL) + nDotH * specularFactor * vec3(1);"
                "    outColor = min(vec3(1), outColor);"
                ""
                "    float outAlpha = colorV.a;"
                "#if STIPPLE_PATTERN"
                "    int stipple = int(gl_FragCoord.x + gl_FragCoord.y);"
                "    if (stipple%2 == 0)"
                "        discard;"
                "#endif"
                "    outputColor = vec4(outColor, outAlpha);"
                "}"
              }
            }
          }
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_18
        DataVariance DYNAMIC
        name "ShapeGenerator::mTransparent"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_19
          DataVariance DYNAMIC
          name "ShapeGenerator::TransparentStateSet"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 50
          binName RenderBin
          GL_CULL_FACE ON
          GL_DEPTH_TEST ON
          GL_BLEND ON
          CullFace {
            mode BACK
          }
          BlendFunc {
            source SRC_ALPHA
            destination ONE_MINUS_SRC_ALPHA
          }
          Depth {
            function LEQUAL
            writeMask FALSE
            range 0 1
          }
          Use Program_17
        }
        num_children 27
        MatrixTransform {
          UniqueID MatrixTransform_20
          nodeMask 0xffffffff
          cullingActive TRUE
          StateSet {
            UniqueID StateSet_21
            DataVariance DYNAMIC
            rendering_hint DEFAULT_BIN
            renderBinMode INHERIT
            Uniform {
              UniqueID Uniform_22
              DataVariance DYNAMIC
              name "color"
              type vec4 1 FloatArray 4
              {
                1 1 1 0.8 
              }
            }
          }
          referenceFrame RELATIVE
          Matrix {
            1000 0 0 0
            0 1000 0 0
            0 0 1000 0
            0 0 0 1
          }
          num_children 1
          MatrixTransform {
            UniqueID MatrixTransform_23
            name "Plane.osg"
            nodeMask 0xffffffff
            cullingActive TRUE
            referenceFrame RELATIVE
            Matrix {
              1 0 0 0
              0 1 0 0
              0 0 1 0
              0 0 0 1
            }
            num_children 1
            MatrixTransform {
              DataVariance STATIC
              name "Scene Root"
              nodeMask 0xffffffff
              cullingActive TRUE
              StateSet {
                UniqueID StateSet_24
                DataVariance STATIC
                rendering_hint DEFAULT_BIN
                renderBinMode INHERIT
                GL_LIGHTING ON
              }
              referenceFrame RELATIVE
              Matrix {
                1 0 0 0
                0 1 0 0
                0 0 1 0
                0 0 0 1
              }
              num_children 1
              MatrixTransform {
                DataVariance STATIC
                name "Plane001"
                nodeMask 0xffffffff
                cullingActive TRUE
                referenceFrame RELATIVE
                Matrix {
                  1 0 0 0
                  0 1 0 0
                  0 0 1 0
                  0 0 0 1
                }
                num_children 1
                Geode {
                  DataVariance STATIC
                  name "Plane001-GEODE"
                  nodeMask 0xffffffff
                  cullingActive TRUE
                  num_drawables 1
                  Geometry {
                    UniqueID Geometry_25
                    DataVariance STATIC
                    StateSet {
                      UniqueID StateSet_26
                      DataVariance STATIC
                      rendering_hint DEFAULT_BIN
                      renderBinMode INHERIT
                    }
                    supportsDisplayList FALSE
                    useDisplayList FALSE
                    useVertexBufferObjects FALSE
                    PrimitiveSets 1
                    {
                      DrawArrays TRIANGLES 0 12
                    }
                    VertexArray UniqueID Vec3Array_27 Vec3Array 12
                    {
                      0.5 -0.5 0
                      0.5 0.5 0
                      -0.5 0.5 0
                      0.5 -0.5 0
                      -0.5 0.5 0
                      -0.5 -0.5 0
                      0.5 -0.5 0
                      -0.5 -0.5 0
                      -0.5 0.5 0
                      0.5 -0.5 0
                      -0.5 0.5 0
                      0.5 0.5 0
                    }
                    NormalBinding PER_VERTEX
                    NormalArray UniqueID Vec3Array_28 Vec3Array 12
                    {
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                    }
                    ColorBinding PER_VERTEX
                    ColorArray Vec4Array 12
                    {
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                    }
                    TexCoordArray 0 UniqueID Vec2Array_29 Vec2Array 12
                    {
                      1 0
                      1 1
                      0 1
                      1 0
                      0 1
                      0 0
                      1 0
                      0 0
                      0 1
                      1 0
                      0 1
                      1 1
                    }
                  }
                }
              }
            }
          }
        }
        MatrixTransform {
          UniqueID MatrixTransform_30
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 4 0 0
            0 0 8 0
            1.5 0 4 1
          }
          num_children 1
          MatrixTransform {
            UniqueID MatrixTransform_31
            name "Box.osg"
            nodeMask 0xffffffff
            cullingActive TRUE
            referenceFrame RELATIVE
            Matrix {
              1 0 0 0
              0 1 0 0
              0 0 1 0
              0 0 0 1
            }
            num_children 1
            MatrixTransform {
              DataVariance STATIC
              name "Scene Root"
              nodeMask 0xffffffff
              cullingActive TRUE
              Use StateSet_24
              referenceFrame RELATIVE
              Matrix {
                1 0 0 0
                0 1 0 0
                0 0 1 0
                0 0 0 1
              }
              num_children 1
              MatrixTransform {
                DataVariance STATIC
                name "Box001"
                nodeMask 0xffffffff
                cullingActive TRUE
                referenceFrame RELATIVE
                Matrix {
                  1 0 0 0
                  0 1 0 0
                  0 0 1 0
                  0 0 -0.5 1
                }
                num_children 1
                Geode {
                  DataVariance STATIC
                  name "Box001-GEODE"
                  nodeMask 0xffffffff
                  cullingActive TRUE
                  num_drawables 1
                  Geometry {
                    UniqueID Geometry_32
                    DataVariance STATIC
                    Use StateSet_26
                    supportsDisplayList FALSE
                    useDisplayList FALSE
                    useVertexBufferObjects FALSE
                    PrimitiveSets 1
                    {
                      DrawArrays TRIANGLES 0 36
                    }
                    VertexArray UniqueID Vec3Array_33 Vec3Array 36
                    {
                      -0.5 -0.5 0
                      -0.5 0.5 0
                      0.5 0.5 0
                      0.5 0.5 0
                      0.5 -0.5 0
                      -0.5 -0.5 0
                      -0.5 -0.5 1
                      0.5 -0.5 1
                      0.5 0.5 1
                      0.5 0.5 1
                      -0.5 0.5 1
                      -0.5 -0.5 1
                      -0.5 -0.5 0
                      0.5 -0.5 0
                      0.5 -0.5 1
                      0.5 -0.5 1
                      -0.5 -0.5 1
                      -0.5 -0.5 0
                      0.5 -0.5 0
                      0.5 0.5 0
                      0.5 0.5 1
                      0.5 0.5 1
                      0.5 -0.5 1
                      0.5 -0.5 0
                      0.5 0.5 0
                      -0.5 0.5 0
                      -0.5 0.5 1
                      -0.5 0.5 1
                      0.5 0.5 1
                      0.5 0.5 0
                      -0.5 0.5 0
                      -0.5 -0.5 0
                      -0.5 -0.5 1
                      -0.5 -0.5 1
                      -0.5 0.5 1
                      -0.5 0.5 0
                    }
                    NormalBinding PER_VERTEX
                    NormalArray UniqueID Vec3Array_34 Vec3Array 36
                    {
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 1
                      0 -0 1
                      0 0 1
                      0 0 1
                      -0 0 1
                      0 0 1
                      0 -1 0
                      0 -1 0
                      0 -1 0
                      0 -1 0
                      0 -1 0
                      0 -1 0
                      1 0 0
                      1 0 -0
                      1 0 0
                      1 0 0
                      1 -0 0
                      1 0 0
                      0 1 0
                      0 1 0
                      0 1 0
                      0 1 0
                      0 1 0
                      0 1 0
                      -1 0 0
                      -1 0 0
                      -1 0 0
                      -1 0 0
                      -1 -0 -0
                      -1 0 0
                    }
                    ColorBinding PER_VERTEX
                    ColorArray Vec4Array 36
                    {
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                    }
                  }
                }
              }
            }
          }
        }
        MatrixTransform {
          UniqueID MatrixTransform_35
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 4 0 0
            0 0 8 0
            -1.5 0 4 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_36
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2 0 0 0
            0 4 0 0
            0 0 1 0
            0 0 0.5 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_37
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.32683e-016 -3.41472 1.66724 0
            1.1538e-029 -1.66724 -3.41472 0
            1 5.5024e-017 -2.68655e-017 0
            7.10258e-037 -8.72383e-014 8 1
          }
          num_children 1
          MatrixTransform {
            UniqueID MatrixTransform_38
            name "Cylinder.osg"
            nodeMask 0xffffffff
            cullingActive TRUE
            referenceFrame RELATIVE
            Matrix {
              1 0 0 0
              0 1 0 0
              0 0 1 0
              0 0 0 1
            }
            num_children 1
            MatrixTransform {
              DataVariance STATIC
              name "Scene Root"
              nodeMask 0xffffffff
              cullingActive TRUE
              Use StateSet_24
              referenceFrame RELATIVE
              Matrix {
                1 0 0 0
                0 1 0 0
                0 0 1 0
                0 0 0 1
              }
              num_children 2
              MatrixTransform {
                DataVariance STATIC
                name "Camera001.Target"
                nodeMask 0xffffffff
                cullingActive TRUE
                referenceFrame RELATIVE
                Matrix {
                  0.490357 -0.871522 -6.65743e-008 0
                  0.346545 0.194981 0.917545 0
                  -0.79966 -0.449925 0.397632 0
                  -2.10905 -26.4448 1.79578 1
                }
                num_children 1
                Geode {
                  DataVariance STATIC
                  name "Camera001.Target-GEODE"
                  nodeMask 0xffffffff
                  cullingActive TRUE
                  num_drawables 0
                }
              }
              MatrixTransform {
                DataVariance STATIC
                name "Cylinder002"
                nodeMask 0xffffffff
                cullingActive TRUE
                referenceFrame RELATIVE
                Matrix {
                  1 0 0 0
                  0 1 -2.32831e-010 0
                  0 2.32831e-010 1 0
                  0 0 -0.5 1
                }
                num_children 1
                Geode {
                  DataVariance STATIC
                  name "Cylinder002-GEODE"
                  nodeMask 0xffffffff
                  cullingActive TRUE
                  num_drawables 1
                  Geometry {
                    UniqueID Geometry_39
                    DataVariance STATIC
                    Use StateSet_26
                    supportsDisplayList FALSE
                    useDisplayList FALSE
                    useVertexBufferObjects FALSE
                    PrimitiveSets 1
                    {
                      DrawArrays TRIANGLES 0 636
                    }
                    VertexArray UniqueID Vec3Array_40 Vec3Array 636
                    {
                      0.5 0 0
                      0.469846 0.17101 0
                      0.469846 0.17101 0.202
                      0.469846 0.17101 0.202
                      0.5 0 0.202
                      0.5 0 0
                      0.469846 0.17101 0
                      0.383022 0.321394 0
                      0.383022 0.321394 0.202
                      0.383022 0.321394 0.202
                      0.469846 0.17101 0.202
                      0.469846 0.17101 0
                      0.383022 0.321394 0
                      0.25 0.433013 0
                      0.25 0.433013 0.202
                      0.25 0.433013 0.202
                      0.383022 0.321394 0.202
                      0.383022 0.321394 0
                      0.25 0.433013 0
                      0.0868241 0.492404 0
                      0.0868241 0.492404 0.202
                      0.0868241 0.492404 0.202
                      0.25 0.433013 0.202
                      0.25 0.433013 0
                      0.0868241 0.492404 0
                      -0.0868241 0.492404 0
                      -0.0868241 0.492404 0.202
                      -0.0868241 0.492404 0.202
                      0.0868241 0.492404 0.202
                      0.0868241 0.492404 0
                      -0.0868241 0.492404 0
                      -0.25 0.433013 0
                      -0.25 0.433013 0.202
                      -0.25 0.433013 0.202
                      -0.0868241 0.492404 0.202
                      -0.0868241 0.492404 0
                      -0.25 0.433013 0
                      -0.383022 0.321394 0
                      -0.383022 0.321394 0.202
                      -0.383022 0.321394 0.202
                      -0.25 0.433013 0.202
                      -0.25 0.433013 0
                      -0.383022 0.321394 0
                      -0.469846 0.17101 0
                      -0.469846 0.17101 0.202
                      -0.469846 0.17101 0.202
                      -0.383022 0.321394 0.202
                      -0.383022 0.321394 0
                      -0.469846 0.17101 0
                      -0.5 7.54979e-008 0
                      -0.5 7.54979e-008 0.202
                      -0.5 7.54979e-008 0.202
                      -0.469846 0.17101 0.202
                      -0.469846 0.17101 0
                      -0.5 7.54979e-008 0
                      -0.469846 -0.17101 0
                      -0.469846 -0.17101 0.202
                      -0.469846 -0.17101 0.202
                      -0.5 7.54979e-008 0.202
                      -0.5 7.54979e-008 0
                      -0.469846 -0.17101 0
                      -0.383022 -0.321394 0
                      -0.383022 -0.321394 0.202
                      -0.383022 -0.321394 0.202
                      -0.469846 -0.17101 0.202
                      -0.469846 -0.17101 0
                      -0.383022 -0.321394 0
                      -0.25 -0.433013 0
                      -0.25 -0.433013 0.202
                      -0.25 -0.433013 0.202
                      -0.383022 -0.321394 0.202
                      -0.383022 -0.321394 0
                      -0.25 -0.433013 0
                      -0.0868243 -0.492404 0
                      -0.0868243 -0.492404 0.202
                      -0.0868243 -0.492404 0.202
                      -0.25 -0.433013 0.202
                      -0.25 -0.433013 0
                      -0.0868243 -0.492404 0
                      0.0868238 -0.492404 0
                      0.0868238 -0.492404 0.202
                      0.0868238 -0.492404 0.202
                      -0.0868243 -0.492404 0.202
                      -0.0868243 -0.492404 0
                      0.0868238 -0.492404 0
                      0.25 -0.433013 0
                      0.25 -0.433013 0.202
                      0.25 -0.433013 0.202
                      0.0868238 -0.492404 0.202
                      0.0868238 -0.492404 0
                      0.25 -0.433013 0
                      0.383022 -0.321394 0
                      0.383022 -0.321394 0.202
                      0.383022 -0.321394 0.202
                      0.25 -0.433013 0.202
                      0.25 -0.433013 0
                      0.383022 -0.321394 0
                      0.469846 -0.17101 0
                      0.469846 -0.17101 0.202
                      0.469846 -0.17101 0.202
                      0.383022 -0.321394 0.202
                      0.383022 -0.321394 0
                      0.469846 -0.17101 0
                      0.5 0 0
                      0.5 0 0.202
                      0.5 0 0.202
                      0.469846 -0.17101 0.202
                      0.469846 -0.17101 0
                      0.5 0 0.202
                      0.469846 0.17101 0.202
                      0.469846 0.17101 0.404
                      0.469846 0.17101 0.404
                      0.5 0 0.404
                      0.5 0 0.202
                      0.469846 0.17101 0.202
                      0.383022 0.321394 0.202
                      0.383022 0.321394 0.404
                      0.383022 0.321394 0.404
                      0.469846 0.17101 0.404
                      0.469846 0.17101 0.202
                      0.383022 0.321394 0.202
                      0.25 0.433013 0.202
                      0.25 0.433013 0.404
                      0.25 0.433013 0.404
                      0.383022 0.321394 0.404
                      0.383022 0.321394 0.202
                      0.25 0.433013 0.202
                      0.0868241 0.492404 0.202
                      0.0868241 0.492404 0.404
                      0.0868241 0.492404 0.404
                      0.25 0.433013 0.404
                      0.25 0.433013 0.202
                      0.0868241 0.492404 0.202
                      -0.0868241 0.492404 0.202
                      -0.0868241 0.492404 0.404
                      -0.0868241 0.492404 0.404
                      0.0868241 0.492404 0.404
                      0.0868241 0.492404 0.202
                      -0.0868241 0.492404 0.202
                      -0.25 0.433013 0.202
                      -0.25 0.433013 0.404
                      -0.25 0.433013 0.404
                      -0.0868241 0.492404 0.404
                      -0.0868241 0.492404 0.202
                      -0.25 0.433013 0.202
                      -0.383022 0.321394 0.202
                      -0.383022 0.321394 0.404
                      -0.383022 0.321394 0.404
                      -0.25 0.433013 0.404
                      -0.25 0.433013 0.202
                      -0.383022 0.321394 0.202
                      -0.469846 0.17101 0.202
                      -0.469846 0.17101 0.404
                      -0.469846 0.17101 0.404
                      -0.383022 0.321394 0.404
                      -0.383022 0.321394 0.202
                      -0.469846 0.17101 0.202
                      -0.5 7.54979e-008 0.202
                      -0.5 7.54979e-008 0.404
                      -0.5 7.54979e-008 0.404
                      -0.469846 0.17101 0.404
                      -0.469846 0.17101 0.202
                      -0.5 7.54979e-008 0.202
                      -0.469846 -0.17101 0.202
                      -0.469846 -0.17101 0.404
                      -0.469846 -0.17101 0.404
                      -0.5 7.54979e-008 0.404
                      -0.5 7.54979e-008 0.202
                      -0.469846 -0.17101 0.202
                      -0.383022 -0.321394 0.202
                      -0.383022 -0.321394 0.404
                      -0.383022 -0.321394 0.404
                      -0.469846 -0.17101 0.404
                      -0.469846 -0.17101 0.202
                      -0.383022 -0.321394 0.202
                      -0.25 -0.433013 0.202
                      -0.25 -0.433013 0.404
                      -0.25 -0.433013 0.404
                      -0.383022 -0.321394 0.404
                      -0.383022 -0.321394 0.202
                      -0.25 -0.433013 0.202
                      -0.0868243 -0.492404 0.202
                      -0.0868243 -0.492404 0.404
                      -0.0868243 -0.492404 0.404
                      -0.25 -0.433013 0.404
                      -0.25 -0.433013 0.202
                      -0.0868243 -0.492404 0.202
                      0.0868238 -0.492404 0.202
                      0.0868238 -0.492404 0.404
                      0.0868238 -0.492404 0.404
                      -0.0868243 -0.492404 0.404
                      -0.0868243 -0.492404 0.202
                      0.0868238 -0.492404 0.202
                      0.25 -0.433013 0.202
                      0.25 -0.433013 0.404
                      0.25 -0.433013 0.404
                      0.0868238 -0.492404 0.404
                      0.0868238 -0.492404 0.202
                      0.25 -0.433013 0.202
                      0.383022 -0.321394 0.202
                      0.383022 -0.321394 0.404
                      0.383022 -0.321394 0.404
                      0.25 -0.433013 0.404
                      0.25 -0.433013 0.202
                      0.383022 -0.321394 0.202
                      0.469846 -0.17101 0.202
                      0.469846 -0.17101 0.404
                      0.469846 -0.17101 0.404
                      0.383022 -0.321394 0.404
                      0.383022 -0.321394 0.202
                      0.469846 -0.17101 0.202
                      0.5 0 0.202
                      0.5 0 0.404
                      0.5 0 0.404
                      0.469846 -0.17101 0.404
                      0.469846 -0.17101 0.202
                      0.5 0 0.404
                      0.469846 0.17101 0.404
                      0.469846 0.17101 0.606
                      0.469846 0.17101 0.606
                      0.5 0 0.606
                      0.5 0 0.404
                      0.469846 0.17101 0.404
                      0.383022 0.321394 0.404
                      0.383022 0.321394 0.606
                      0.383022 0.321394 0.606
                      0.469846 0.17101 0.606
                      0.469846 0.17101 0.404
                      0.383022 0.321394 0.404
                      0.25 0.433013 0.404
                      0.25 0.433013 0.606
                      0.25 0.433013 0.606
                      0.383022 0.321394 0.606
                      0.383022 0.321394 0.404
                      0.25 0.433013 0.404
                      0.0868241 0.492404 0.404
                      0.0868241 0.492404 0.606
                      0.0868241 0.492404 0.606
                      0.25 0.433013 0.606
                      0.25 0.433013 0.404
                      0.0868241 0.492404 0.404
                      -0.0868241 0.492404 0.404
                      -0.0868241 0.492404 0.606
                      -0.0868241 0.492404 0.606
                      0.0868241 0.492404 0.606
                      0.0868241 0.492404 0.404
                      -0.0868241 0.492404 0.404
                      -0.25 0.433013 0.404
                      -0.25 0.433013 0.606
                      -0.25 0.433013 0.606
                      -0.0868241 0.492404 0.606
                      -0.0868241 0.492404 0.404
                      -0.25 0.433013 0.404
                      -0.383022 0.321394 0.404
                      -0.383022 0.321394 0.606
                      -0.383022 0.321394 0.606
                      -0.25 0.433013 0.606
                      -0.25 0.433013 0.404
                      -0.383022 0.321394 0.404
                      -0.469846 0.17101 0.404
                      -0.469846 0.17101 0.606
                      -0.469846 0.17101 0.606
                      -0.383022 0.321394 0.606
                      -0.383022 0.321394 0.404
                      -0.469846 0.17101 0.404
                      -0.5 7.54979e-008 0.404
                      -0.5 7.54979e-008 0.606
                      -0.5 7.54979e-008 0.606
                      -0.469846 0.17101 0.606
                      -0.469846 0.17101 0.404
                      -0.5 7.54979e-008 0.404
                      -0.469846 -0.17101 0.404
                      -0.469846 -0.17101 0.606
                      -0.469846 -0.17101 0.606
                      -0.5 7.54979e-008 0.606
                      -0.5 7.54979e-008 0.404
                      -0.469846 -0.17101 0.404
                      -0.383022 -0.321394 0.404
                      -0.383022 -0.321394 0.606
                      -0.383022 -0.321394 0.606
                      -0.469846 -0.17101 0.606
                      -0.469846 -0.17101 0.404
                      -0.383022 -0.321394 0.404
                      -0.25 -0.433013 0.404
                      -0.25 -0.433013 0.606
                      -0.25 -0.433013 0.606
                      -0.383022 -0.321394 0.606
                      -0.383022 -0.321394 0.404
                      -0.25 -0.433013 0.404
                      -0.0868243 -0.492404 0.404
                      -0.0868243 -0.492404 0.606
                      -0.0868243 -0.492404 0.606
                      -0.25 -0.433013 0.606
                      -0.25 -0.433013 0.404
                      -0.0868243 -0.492404 0.404
                      0.0868238 -0.492404 0.404
                      0.0868238 -0.492404 0.606
                      0.0868238 -0.492404 0.606
                      -0.0868243 -0.492404 0.606
                      -0.0868243 -0.492404 0.404
                      0.0868238 -0.492404 0.404
                      0.25 -0.433013 0.404
                      0.25 -0.433013 0.606
                      0.25 -0.433013 0.606
                      0.0868238 -0.492404 0.606
                      0.0868238 -0.492404 0.404
                      0.25 -0.433013 0.404
                      0.383022 -0.321394 0.404
                      0.383022 -0.321394 0.606
                      0.383022 -0.321394 0.606
                      0.25 -0.433013 0.606
                      0.25 -0.433013 0.404
                      0.383022 -0.321394 0.404
                      0.469846 -0.17101 0.404
                      0.469846 -0.17101 0.606
                      0.469846 -0.17101 0.606
                      0.383022 -0.321394 0.606
                      0.383022 -0.321394 0.404
                      0.469846 -0.17101 0.404
                      0.5 0 0.404
                      0.5 0 0.606
                      0.5 0 0.606
                      0.469846 -0.17101 0.606
                      0.469846 -0.17101 0.404
                      0.5 0 0.606
                      0.469846 0.17101 0.606
                      0.469846 0.17101 0.808
                      0.469846 0.17101 0.808
                      0.5 0 0.808
                      0.5 0 0.606
                      0.469846 0.17101 0.606
                      0.383022 0.321394 0.606
                      0.383022 0.321394 0.808
                      0.383022 0.321394 0.808
                      0.469846 0.17101 0.808
                      0.469846 0.17101 0.606
                      0.383022 0.321394 0.606
                      0.25 0.433013 0.606
                      0.25 0.433013 0.808
                      0.25 0.433013 0.808
                      0.383022 0.321394 0.808
                      0.383022 0.321394 0.606
                      0.25 0.433013 0.606
                      0.0868241 0.492404 0.606
                      0.0868241 0.492404 0.808
                      0.0868241 0.492404 0.808
                      0.25 0.433013 0.808
                      0.25 0.433013 0.606
                      0.0868241 0.492404 0.606
                      -0.0868241 0.492404 0.606
                      -0.0868241 0.492404 0.808
                      -0.0868241 0.492404 0.808
                      0.0868241 0.492404 0.808
                      0.0868241 0.492404 0.606
                      -0.0868241 0.492404 0.606
                      -0.25 0.433013 0.606
                      -0.25 0.433013 0.808
                      -0.25 0.433013 0.808
                      -0.0868241 0.492404 0.808
                      -0.0868241 0.492404 0.606
                      -0.25 0.433013 0.606
                      -0.383022 0.321394 0.606
                      -0.383022 0.321394 0.808
                      -0.383022 0.321394 0.808
                      -0.25 0.433013 0.808
                      -0.25 0.433013 0.606
                      -0.383022 0.321394 0.606
                      -0.469846 0.17101 0.606
                      -0.469846 0.17101 0.808
                      -0.469846 0.17101 0.808
                      -0.383022 0.321394 0.808
                      -0.383022 0.321394 0.606
                      -0.469846 0.17101 0.606
                      -0.5 7.54979e-008 0.606
                      -0.5 7.54979e-008 0.808
                      -0.5 7.54979e-008 0.808
                      -0.469846 0.17101 0.808
                      -0.469846 0.17101 0.606
                      -0.5 7.54979e-008 0.606
                      -0.469846 -0.17101 0.606
                      -0.469846 -0.17101 0.808
                      -0.469846 -0.17101 0.808
                      -0.5 7.54979e-008 0.808
                      -0.5 7.54979e-008 0.606
                      -0.469846 -0.17101 0.606
                      -0.383022 -0.321394 0.606
                      -0.383022 -0.321394 0.808
                      -0.383022 -0.321394 0.808
                      -0.469846 -0.17101 0.808
                      -0.469846 -0.17101 0.606
                      -0.383022 -0.321394 0.606
                      -0.25 -0.433013 0.606
                      -0.25 -0.433013 0.808
                      -0.25 -0.433013 0.808
                      -0.383022 -0.321394 0.808
                      -0.383022 -0.321394 0.606
                      -0.25 -0.433013 0.606
                      -0.0868243 -0.492404 0.606
                      -0.0868243 -0.492404 0.808
                      -0.0868243 -0.492404 0.808
                      -0.25 -0.433013 0.808
                      -0.25 -0.433013 0.606
                      -0.0868243 -0.492404 0.606
                      0.0868238 -0.492404 0.606
                      0.0868238 -0.492404 0.808
                      0.0868238 -0.492404 0.808
                      -0.0868243 -0.492404 0.808
                      -0.0868243 -0.492404 0.606
                      0.0868238 -0.492404 0.606
                      0.25 -0.433013 0.606
                      0.25 -0.433013 0.808
                      0.25 -0.433013 0.808
                      0.0868238 -0.492404 0.808
                      0.0868238 -0.492404 0.606
                      0.25 -0.433013 0.606
                      0.383022 -0.321394 0.606
                      0.383022 -0.321394 0.808
                      0.383022 -0.321394 0.808
                      0.25 -0.433013 0.808
                      0.25 -0.433013 0.606
                      0.383022 -0.321394 0.606
                      0.469846 -0.17101 0.606
                      0.469846 -0.17101 0.808
                      0.469846 -0.17101 0.808
                      0.383022 -0.321394 0.808
                      0.383022 -0.321394 0.606
                      0.469846 -0.17101 0.606
                      0.5 0 0.606
                      0.5 0 0.808
                      0.5 0 0.808
                      0.469846 -0.17101 0.808
                      0.469846 -0.17101 0.606
                      0.5 0 0.808
                      0.469846 0.17101 0.808
                      0.469846 0.17101 1.01
                      0.469846 0.17101 1.01
                      0.5 0 1.01
                      0.5 0 0.808
                      0.469846 0.17101 0.808
                      0.383022 0.321394 0.808
                      0.383022 0.321394 1.01
                      0.383022 0.321394 1.01
                      0.469846 0.17101 1.01
                      0.469846 0.17101 0.808
                      0.383022 0.321394 0.808
                      0.25 0.433013 0.808
                      0.25 0.433013 1.01
                      0.25 0.433013 1.01
                      0.383022 0.321394 1.01
                      0.383022 0.321394 0.808
                      0.25 0.433013 0.808
                      0.0868241 0.492404 0.808
                      0.0868241 0.492404 1.01
                      0.0868241 0.492404 1.01
                      0.25 0.433013 1.01
                      0.25 0.433013 0.808
                      0.0868241 0.492404 0.808
                      -0.0868241 0.492404 0.808
                      -0.0868241 0.492404 1.01
                      -0.0868241 0.492404 1.01
                      0.0868241 0.492404 1.01
                      0.0868241 0.492404 0.808
                      -0.0868241 0.492404 0.808
                      -0.25 0.433013 0.808
                      -0.25 0.433013 1.01
                      -0.25 0.433013 1.01
                      -0.0868241 0.492404 1.01
                      -0.0868241 0.492404 0.808
                      -0.25 0.433013 0.808
                      -0.383022 0.321394 0.808
                      -0.383022 0.321394 1.01
                      -0.383022 0.321394 1.01
                      -0.25 0.433013 1.01
                      -0.25 0.433013 0.808
                      -0.383022 0.321394 0.808
                      -0.469846 0.17101 0.808
                      -0.469846 0.17101 1.01
                      -0.469846 0.17101 1.01
                      -0.383022 0.321394 1.01
                      -0.383022 0.321394 0.808
                      -0.469846 0.17101 0.808
                      -0.5 7.54979e-008 0.808
                      -0.5 7.54979e-008 1.01
                      -0.5 7.54979e-008 1.01
                      -0.469846 0.17101 1.01
                      -0.469846 0.17101 0.808
                      -0.5 7.54979e-008 0.808
                      -0.469846 -0.17101 0.808
                      -0.469846 -0.17101 1.01
                      -0.469846 -0.17101 1.01
                      -0.5 7.54979e-008 1.01
                      -0.5 7.54979e-008 0.808
                      -0.469846 -0.17101 0.808
                      -0.383022 -0.321394 0.808
                      -0.383022 -0.321394 1.01
                      -0.383022 -0.321394 1.01
                      -0.469846 -0.17101 1.01
                      -0.469846 -0.17101 0.808
                      -0.383022 -0.321394 0.808
                      -0.25 -0.433013 0.808
                      -0.25 -0.433013 1.01
                      -0.25 -0.433013 1.01
                      -0.383022 -0.321394 1.01
                      -0.383022 -0.321394 0.808
                      -0.25 -0.433013 0.808
                      -0.0868243 -0.492404 0.808
                      -0.0868243 -0.492404 1.01
                      -0.0868243 -0.492404 1.01
                      -0.25 -0.433013 1.01
                      -0.25 -0.433013 0.808
                      -0.0868243 -0.492404 0.808
                      0.0868238 -0.492404 0.808
                      0.0868238 -0.492404 1.01
                      0.0868238 -0.492404 1.01
                      -0.0868243 -0.492404 1.01
                      -0.0868243 -0.492404 0.808
                      0.0868238 -0.492404 0.808
                      0.25 -0.433013 0.808
                      0.25 -0.433013 1.01
                      0.25 -0.433013 1.01
                      0.0868238 -0.492404 1.01
                      0.0868238 -0.492404 0.808
                      0.25 -0.433013 0.808
                      0.383022 -0.321394 0.808
                      0.383022 -0.321394 1.01
                      0.383022 -0.321394 1.01
                      0.25 -0.433013 1.01
                      0.25 -0.433013 0.808
                      0.383022 -0.321394 0.808
                      0.469846 -0.17101 0.808
                      0.469846 -0.17101 1.01
                      0.469846 -0.17101 1.01
                      0.383022 -0.321394 1.01
                      0.383022 -0.321394 0.808
                      0.469846 -0.17101 0.808
                      0.5 0 0.808
                      0.5 0 1.01
                      0.5 0 1.01
                      0.469846 -0.17101 1.01
                      0.469846 -0.17101 0.808
                      0.383022 -0.321394 0
                      0.25 -0.433013 0
                      0.0868238 -0.492404 0
                      0.0868238 -0.492404 0
                      -0.0868243 -0.492404 0
                      -0.25 -0.433013 0
                      -0.25 -0.433013 0
                      -0.383022 -0.321394 0
                      -0.469846 -0.17101 0
                      0.0868238 -0.492404 0
                      -0.25 -0.433013 0
                      -0.469846 -0.17101 0
                      -0.469846 -0.17101 0
                      -0.5 7.54979e-008 0
                      -0.469846 0.17101 0
                      -0.469846 0.17101 0
                      -0.383022 0.321394 0
                      -0.25 0.433013 0
                      -0.469846 -0.17101 0
                      -0.469846 0.17101 0
                      -0.25 0.433013 0
                      -0.25 0.433013 0
                      -0.0868241 0.492404 0
                      0.0868241 0.492404 0
                      0.0868241 0.492404 0
                      0.25 0.433013 0
                      0.383022 0.321394 0
                      -0.25 0.433013 0
                      0.0868241 0.492404 0
                      0.383022 0.321394 0
                      -0.469846 -0.17101 0
                      -0.25 0.433013 0
                      0.383022 0.321394 0
                      0.0868238 -0.492404 0
                      -0.469846 -0.17101 0
                      0.383022 0.321394 0
                      0.383022 0.321394 0
                      0.469846 0.17101 0
                      0.5 0 0
                      0.0868238 -0.492404 0
                      0.383022 0.321394 0
                      0.5 0 0
                      0.383022 -0.321394 0
                      0.0868238 -0.492404 0
                      0.5 0 0
                      0.469846 -0.17101 0
                      0.383022 -0.321394 0
                      0.5 0 0
                      0.469846 0.17101 1.01
                      0.383022 0.321394 1.01
                      0.25 0.433013 1.01
                      0.25 0.433013 1.01
                      0.0868241 0.492404 1.01
                      -0.0868241 0.492404 1.01
                      -0.0868241 0.492404 1.01
                      -0.25 0.433013 1.01
                      -0.383022 0.321394 1.01
                      0.25 0.433013 1.01
                      -0.0868241 0.492404 1.01
                      -0.383022 0.321394 1.01
                      -0.383022 0.321394 1.01
                      -0.469846 0.17101 1.01
                      -0.5 7.54979e-008 1.01
                      -0.5 7.54979e-008 1.01
                      -0.469846 -0.17101 1.01
                      -0.383022 -0.321394 1.01
                      -0.383022 0.321394 1.01
                      -0.5 7.54979e-008 1.01
                      -0.383022 -0.321394 1.01
                      -0.383022 -0.321394 1.01
                      -0.25 -0.433013 1.01
                      -0.0868243 -0.492404 1.01
                      -0.0868243 -0.492404 1.01
                      0.0868238 -0.492404 1.01
                      0.25 -0.433013 1.01
                      -0.383022 -0.321394 1.01
                      -0.0868243 -0.492404 1.01
                      0.25 -0.433013 1.01
                      -0.383022 0.321394 1.01
                      -0.383022 -0.321394 1.01
                      0.25 -0.433013 1.01
                      0.25 0.433013 1.01
                      -0.383022 0.321394 1.01
                      0.25 -0.433013 1.01
                      0.25 -0.433013 1.01
                      0.383022 -0.321394 1.01
                      0.469846 -0.17101 1.01
                      0.25 0.433013 1.01
                      0.25 -0.433013 1.01
                      0.469846 -0.17101 1.01
                      0.469846 0.17101 1.01
                      0.25 0.433013 1.01
                      0.469846 -0.17101 1.01
                      0.5 0 1.01
                      0.469846 0.17101 1.01
                      0.469846 -0.17101 1.01
                    }
                    NormalBinding PER_VERTEX
                    NormalArray UniqueID Vec3Array_41 Vec3Array 636
                    {
                      1 -1.73389e-007 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      1 -1.68573e-007 0
                      1 -1.73389e-007 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      1 -1.73389e-007 0
                      1 -1.68573e-007 0
                      1 -1.68573e-007 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      1 -1.68573e-007 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      1 -1.73389e-007 0
                      1 -1.68573e-007 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -1 9.03067e-008 0
                      -1 9.03067e-008 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -1 9.03067e-008 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      1 -1.68573e-007 0
                      1 -1.73389e-007 0
                      1 -1.73389e-007 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      1 -1.73389e-007 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      1 -1.83022e-007 0
                      1 -1.73389e-007 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -1 9.03067e-008 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -1 9.03067e-008 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -1 8.66944e-008 0
                      -1 9.03067e-008 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      1 -1.73389e-007 0
                      1 -1.83022e-007 0
                      1 -1.83022e-007 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      1 -1.83022e-007 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      1 -1.78205e-007 0
                      1 -1.83022e-007 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      1 -1.83022e-007 0
                      1 -1.78205e-007 0
                      1 -1.78205e-007 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      1 -1.78205e-007 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      1 -1.73389e-007 0
                      1 -1.78205e-007 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.939693 0.34202 0
                      0.939693 0.34202 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.766044 0.642788 0
                      0.766044 0.642788 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.5 0.866025 0
                      0.5 0.866025 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      0.173648 0.984808 0
                      0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.173648 0.984808 0
                      -0.173648 0.984808 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.5 0.866025 0
                      -0.5 0.866025 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -0.766044 0.642788 0
                      -0.766044 0.642788 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 0.34202 0
                      -0.939693 0.34202 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -1 8.66944e-008 0
                      -1 8.66944e-008 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.939693 -0.34202 0
                      -0.939693 -0.34202 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.766045 -0.642787 0
                      -0.766045 -0.642787 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.5 -0.866025 0
                      -0.5 -0.866025 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      -0.173649 -0.984808 0
                      -0.173649 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.173648 -0.984808 0
                      0.173648 -0.984808 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.499999 -0.866026 0
                      0.499999 -0.866026 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0.766044 -0.642788 0
                      0.766044 -0.642788 0
                      0.939692 -0.342021 0
                      1 -1.78205e-007 0
                      1 -1.73389e-007 0
                      1 -1.73389e-007 0
                      0.939692 -0.342021 0
                      0.939692 -0.342021 0
                      0 0 -1
                      -0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 -0 -1
                      0 -0 -1
                      0 0 -1
                      0 0 -1
                      0 -0 -1
                      0 -0 -1
                      0 -0 -1
                      0 -0 -1
                      0 -0 -1
                      -0 -0 -1
                      0 0 -1
                      0 -0 -1
                      0 -0 -1
                      0 0 -1
                      0 0 -1
                      0 -0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      -0 -0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 -1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      -0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      -0 0 1
                      -0 0 1
                      -0 0 1
                      -0 -0 1
                      0 0 1
                      0 0 1
                      -0 0 1
                      0 0 1
                      0 0 1
                      -0 -0 1
                      0 -0 1
                      0 -0 1
                      0 -0 1
                      0 0 1
                      0 0 1
                      0 -0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 -0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                      0 0 1
                    }
                    ColorBinding PER_VERTEX
                    ColorArray Vec4Array 636
                    {
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                      1 1 1 1
                    }
                  }
                }
              }
            }
          }
        }
        MatrixTransform {
          UniqueID MatrixTransform_42
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.67585e-016 -3.92693 1.91732 0
            1.32687e-029 -1.91732 -3.92693 0
            0.35 1.92584e-017 -9.40293e-018 0
            0.325 -8.72383e-014 8 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_43
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.67585e-016 -3.92693 1.91732 0
            1.32687e-029 -1.91732 -3.92693 0
            0.35 1.92584e-017 -9.40293e-018 0
            -0.325 -8.72383e-014 8 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_44
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 3.09146e-027 -4.05887e-027 0
            -2.80827e-027 2.51355 1.63771 0
            2.54418e-026 -1.0918 1.6757 0
            0.75 0.418925 8.27295 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_45
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 3.09146e-027 -4.05887e-027 0
            -2.80827e-027 2.51355 1.63771 0
            2.54418e-026 -1.0918 1.6757 0
            -0.75 0.418925 8.27295 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_46
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2 1.54573e-026 -2.02944e-026 0
            -6.55263e-027 5.86494 3.82131 0
            2.54418e-026 -1.0918 1.6757 0
            -5.17808e-027 4.60817 11.0025 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_47
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.8 2.07162e-023 7.06162e-023 0
            -3.10592e-022 8.37849 5.45901 0
            -4.78567e-023 -0.982622 1.50813 0
            -2.72892e-023 8.27656 13.3926 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_48
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -6.21184e-023 1.6757 1.0918 0
            -4.78567e-023 -0.982622 1.50813 0
            0.7 13.3037 16.668 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_49
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -6.21184e-023 1.6757 1.0918 0
            -4.78567e-023 -0.982622 1.50813 0
            -0.7 13.3037 16.668 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_50
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -5.19411e-023 1.83983 0.784234 0
            -5.68377e-023 -0.70581 1.65585 0
            0.7 15.0614 17.606 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_51
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -5.19411e-023 1.83983 0.784234 0
            -5.68377e-023 -0.70581 1.65585 0
            -0.7 15.0614 17.606 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_52
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.8 2.07162e-023 7.06162e-023 0
            -1.55823e-022 5.51949 2.3527 0
            -5.68377e-023 -0.70581 1.65585 0
            -3.74556e-022 18.7411 19.1745 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_53
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -5.19411e-023 1.83983 0.784234 0
            -5.68377e-023 -0.70581 1.65585 0
            0.7 22.4207 20.743 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_54
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.6036e-024 1.56925e-023 0
            -5.19411e-023 1.83983 0.784234 0
            -5.68377e-023 -0.70581 1.65585 0
            -0.7 22.4207 20.743 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_55
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.22465e-016 0.311242 1.97563 0
            1.05779e-023 -1.97563 0.311242 0
            0.8 -7.62322e-018 -4.8389e-017 0
            -2.44703e-022 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_56
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.40834e-016 0.357928 2.27198 0
            1.21646e-023 -2.27198 0.357928 0
            0.25 -2.38226e-018 -1.51216e-017 0
            0.275 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_57
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.40834e-016 0.357928 2.27198 0
            1.21646e-023 -2.27198 0.357928 0
            0.25 -2.38226e-018 -1.51216e-017 0
            -0.275 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_58
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.22465e-016 -1.93298 0.513409 0
            8.16652e-023 -0.513409 -1.93298 0
            0.8 4.73444e-017 -1.25749e-017 0
            -5.04409e-022 23.3407 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_59
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.46958e-016 -2.31958 0.616091 0
            9.79983e-023 -0.616091 -2.31958 0
            0.25 1.47951e-017 -3.92965e-018 0
            0.275 23.3407 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_60
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.46958e-016 -2.31958 0.616091 0
            9.79983e-023 -0.616091 -2.31958 0
            0.25 1.47951e-017 -3.92965e-018 0
            -0.275 23.3407 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_61
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 -8.84064e-023 6.74079e-015 0
            8.84063e-023 1 1.22991e-014 0
            -6.74079e-015 -1.22991e-014 1 0
            -2.98597e-030 27.9999 0.5 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_62
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            100 0 0 0
            0 100 0 0
            0 0 0.2 0
            0 0 -0.1 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_63
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 1 0 0
            0 0 1 0
            0 15 2 1
          }
          num_children 1
          Use MatrixTransform_31
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_64
        DataVariance DYNAMIC
        name "ShapeGenerator::mWireFrame"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_65
          DataVariance DYNAMIC
          name "ShapeGenerator::WireframePass"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 54
          binName RenderBin
          GL_CULL_FACE ON
          GL_DEPTH_TEST ON
          GL_BLEND ON
          GL_POLYGON_OFFSET_POINT ON
          GL_POLYGON_OFFSET_LINE ON
          GL_POLYGON_OFFSET_FILL ON
          PolygonMode {
            mode FRONT LINE
            mode BACK FILL
          }
          PolygonOffset {
            factor 1
            units  1
          }
          CullFace {
            mode BACK
          }
          BlendFunc {
            source SRC_ALPHA
            destination ONE_MINUS_SRC_ALPHA
          }
          Depth {
            function ALWAYS
            writeMask FALSE
            range 0 1
          }
          Use Program_17
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_66
        DataVariance DYNAMIC
        name "ShapeGenerator::mBackground"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_67
          DataVariance DYNAMIC
          name "ShapeGenerator::BackgroundPass"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 52
          binName RenderBin
          GL_DEPTH_TEST ON
          GL_STENCIL_TEST ON
          GL_BLEND ON
          BlendFunc {
            source ZERO
            destination CONSTANT_ALPHA
          }
          Stencil {
            function EQUAL
            functionRef 1
            functionMask 0x1
            stencilFailOperation KEEP
            stencilPassAndDepthFailOperation ZERO
            stencilPassAndDepthPassOperation ZERO
            writeMask 0x1
          }
          Depth {
            function ALWAYS
            writeMask FALSE
            range 0 1
          }
          BlendColor {
            constantColor 1 1 1 0.6
          }
          Use Program_17
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_68
        DataVariance DYNAMIC
        name "ShapeGenerator::mStencil"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_69
          DataVariance DYNAMIC
          name "ShapeGenerator::StencilPass"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 51
          binName RenderBin
          GL_DEPTH_TEST ON
          GL_STENCIL_TEST ON
          Stencil {
            function ALWAYS
            functionRef 1
            functionMask 0x1
            stencilFailOperation REPLACE
            stencilPassAndDepthFailOperation REPLACE
            stencilPassAndDepthPassOperation REPLACE
            writeMask 0x1
          }
          ColorMask {
            redMask OFF
            greenMask OFF
            blueMask OFF
            alphaMask OFF
          }
          Depth {
            function ALWAYS
            writeMask FALSE
            range 0 1
          }
          Use Program_17
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_70
        DataVariance DYNAMIC
        name "ShapeGenerator::mStipple"
        nodeMask 0xffffffff
        cullingActive TRUE
        StateSet {
          UniqueID StateSet_71
          DataVariance DYNAMIC
          name "ShapeGenerator::StipplePass"
          rendering_hint DEFAULT_BIN
          renderBinMode USE
          binNumber 53
          binName RenderBin
          GL_CULL_FACE ON
          GL_DEPTH_TEST ON
          GL_BLEND ON
          CullFace {
            mode FRONT
          }
          BlendFunc {
            source SRC_ALPHA
            destination ONE_MINUS_SRC_ALPHA
          }
          Depth {
            function GREATER
            writeMask FALSE
            range 0 1
          }
          Program {
            UniqueID Program_72
            name "CompiledProgram_8"
            GeometryVerticesOut 1
            GeometryInputType TRIANGLES
            GeometryOutputType TRIANGLE_STRIP
            AttribBindingLocation osg_Color 3
            AttribBindingLocation osg_FogCoord 5
            AttribBindingLocation osg_Normal 2
            AttribBindingLocation osg_SecondaryColor 4
            AttribBindingLocation osg_Vertex 0
            num_shaders 2
            Shader {
              type VERTEX
              code {
                "#define DIRECTIONAL_LIGHT_COUNT 1"
                "#define POINT_LIGHT_COUNT 0"
                "#define PROJECTIVE_LIGHT_COUNT 0"
                "#define SPOT_LIGHT_COUNT 0"
                "#define STIPPLE_PATTERN 1"
                ""
                "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/ui_lit.vert\""
                "#version 330 compatibility"
                ""
                "uniform mat4 osg_ViewMatrix;"
                "uniform mat4 osg_ModelViewProjectionMatrix;"
                "uniform mat3 osg_NormalMatrix;"
                ""
                "uniform vec4 color;"
                ""
                "out vec4 colorV;"
                "out vec3 normal;"
                "attribute vec4 osg_Vertex;"
                "attribute vec3 osg_Normal;"
                "attribute vec4 osg_Color;"
                ""
                "void main()"
                "{"
                "   colorV = color * osg_Color;"
                "   gl_Position = osg_ModelViewProjectionMatrix * osg_Vertex;"
                "   normal = normalize(osg_NormalMatrix * osg_Normal);"
                "}"
              }
            }
            Shader {
              type FRAGMENT
              code {
                "#define DIRECTIONAL_LIGHT_COUNT 1"
                "#define POINT_LIGHT_COUNT 0"
                "#define PROJECTIVE_LIGHT_COUNT 0"
                "#define SPOT_LIGHT_COUNT 0"
                "#define STIPPLE_PATTERN 1"
                ""
                "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/ui_lit.frag\""
                "#version 330 compatibility"
                "in vec4 colorV;"
                "in vec3 normal;"
                "in vec4 gl_FragCoord;"
                "out vec4 outputColor;"
                "uniform float ambientFactor;"
                "uniform float specularFactor;"
                ""
                "const vec3 lightVec = normalize(vec3(-0.3,0.5,1));"
                "const vec3 eyeVec = vec3(0,0,1);"
                "const vec3 halfVec = normalize(lightVec + eyeVec);"
                ""
                "void main()"
                "{"
                "    vec3 n = normalize(normal);"
                "    float nDotL = max(0.0, dot(n, lightVec));"
                "    float nDotH = pow(max(0.0, dot(n, halfVec)), 20);"
                ""
                "    vec3 outColor = colorV.rgb * mix(ambientFactor, 1.0, nDotL) + nDotH * specularFactor * vec3(1);"
                "    outColor = min(vec3(1), outColor);"
                ""
                "    float outAlpha = colorV.a;"
                "#if STIPPLE_PATTERN"
                "    int stipple = int(gl_FragCoord.x + gl_FragCoord.y);"
                "    if (stipple%2 == 0)"
                "        discard;"
                "#endif"
                "    outputColor = vec4(outColor, outAlpha);"
                "}"
              }
            }
          }
        }
        num_children 27
        Use MatrixTransform_20
        Use MatrixTransform_30
        Use MatrixTransform_35
        Use MatrixTransform_36
        Use MatrixTransform_37
        Use MatrixTransform_42
        Use MatrixTransform_43
        Use MatrixTransform_44
        Use MatrixTransform_45
        Use MatrixTransform_46
        Use MatrixTransform_47
        Use MatrixTransform_48
        Use MatrixTransform_49
        Use MatrixTransform_50
        Use MatrixTransform_51
        Use MatrixTransform_52
        Use MatrixTransform_53
        Use MatrixTransform_54
        Use MatrixTransform_55
        Use MatrixTransform_56
        Use MatrixTransform_57
        Use MatrixTransform_58
        Use MatrixTransform_59
        Use MatrixTransform_60
        Use MatrixTransform_61
        Use MatrixTransform_62
        Use MatrixTransform_63
      }
    }
    Group {
      UniqueID Group_73
      DataVariance DYNAMIC
      name "ShapeGeneratorOSG::BufferGroup"
      nodeMask 0x9fffffff
      cullingActive TRUE
      StateSet {
        UniqueID StateSet_74
        DataVariance STATIC
        rendering_hint DEFAULT_BIN
        renderBinMode INHERIT
        Uniform {
          UniqueID Uniform_75
          name "specularFactor"
          type float 1 FloatArray 1
          {
            0 
          }
        }
        Uniform {
          UniqueID Uniform_76
          name "ambientFactor"
          type float 1 FloatArray 1
          {
            0.8 
          }
        }
      }
      num_children 6
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_77
        DataVariance DYNAMIC
        name "ShapeGenerator::mOpaque"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_16
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_78
        DataVariance DYNAMIC
        name "ShapeGenerator::mTransparent"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_19
        num_children 27
        MatrixTransform {
          UniqueID MatrixTransform_79
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1000 0 0 0
            0 1000 0 0
            0 0 1000 0
            0 0 0 1
          }
          num_children 1
          Use MatrixTransform_23
        }
        MatrixTransform {
          UniqueID MatrixTransform_80
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 4 0 0
            0 0 8 0
            1.5 0 4 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_81
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 4 0 0
            0 0 8 0
            -1.5 0 4 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_82
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2 0 0 0
            0 4 0 0
            0 0 1 0
            0 0 0.5 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_83
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.32683e-016 -3.41472 1.66724 0
            7.37344e-030 -1.66724 -3.41472 0
            1 5.5024e-017 -2.68655e-017 0
            -4.75141e-038 -3.53584e-014 8 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_84
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.67585e-016 -3.92693 1.91732 0
            8.47945e-030 -1.91732 -3.92693 0
            0.35 1.92584e-017 -9.40293e-018 0
            0.325 -3.53584e-014 8 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_85
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2.67585e-016 -3.92693 1.91732 0
            8.47945e-030 -1.91732 -3.92693 0
            0.35 1.92584e-017 -9.40293e-018 0
            -0.325 -3.53584e-014 8 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_86
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 3.12685e-027 -4.10987e-027 0
            -2.82179e-027 2.51355 1.63771 0
            2.5752e-026 -1.09181 1.6757 0
            0.75 0.418924 8.27295 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_87
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 3.12685e-027 -4.10987e-027 0
            -2.82179e-027 2.51355 1.63771 0
            2.5752e-026 -1.09181 1.6757 0
            -0.75 0.418924 8.27295 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_88
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            2 1.56342e-026 -2.05493e-026 0
            -6.58419e-027 5.86494 3.82132 0
            2.5752e-026 -1.09181 1.6757 0
            -5.20581e-027 4.60817 11.0025 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_89
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.8 2.24634e-023 7.06189e-023 0
            -3.18733e-022 8.37849 5.45902 0
            -4.69051e-023 -0.982624 1.50813 0
            -2.80043e-023 8.27656 13.3926 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_90
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -6.37466e-023 1.6757 1.0918 0
            -4.69051e-023 -0.982624 1.50813 0
            0.7 13.3037 16.668 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_91
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -6.37466e-023 1.6757 1.0918 0
            -4.69051e-023 -0.982624 1.50813 0
            -0.7 13.3037 16.668 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_92
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -5.37282e-023 1.83983 0.784236 0
            -5.6155e-023 -0.705812 1.65585 0
            0.7 15.0614 17.606 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_93
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -5.37282e-023 1.83983 0.784236 0
            -5.6155e-023 -0.705812 1.65585 0
            -0.7 15.0614 17.606 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_94
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.8 2.24634e-023 7.06189e-023 0
            -1.61184e-022 5.51949 2.35271 0
            -5.6155e-023 -0.705812 1.65585 0
            -3.85438e-022 18.7411 19.1745 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_95
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -5.37282e-023 1.83983 0.784236 0
            -5.6155e-023 -0.705812 1.65585 0
            0.7 22.4207 20.743 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_96
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            0.4 4.99187e-024 1.56931e-023 0
            -5.37282e-023 1.83983 0.784236 0
            -5.6155e-023 -0.705812 1.65585 0
            -0.7 22.4207 20.743 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_97
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.22465e-016 0.277824 1.98061 0
            1.38817e-023 -1.98061 0.277824 0
            0.8 -6.8047e-018 -4.85109e-017 0
            -2.51117e-022 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_98
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.40834e-016 0.319497 2.2777 0
            1.5964e-023 -2.2777 0.319497 0
            0.25 -2.12647e-018 -1.51597e-017 0
            0.275 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_99
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.40834e-016 0.319497 2.2777 0
            1.5964e-023 -2.2777 0.319497 0
            0.25 -2.12647e-018 -1.51597e-017 0
            -0.275 14.1415 17.2139 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_100
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.22465e-016 -1.92403 0.545986 0
            8.22254e-023 -0.545986 -1.92403 0
            0.8 4.71252e-017 -1.33728e-017 0
            -5.19758e-022 23.3406 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_101
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.46958e-016 -2.30884 0.655183 0
            9.86705e-023 -0.655183 -2.30884 0
            0.25 1.47266e-017 -4.17899e-018 0
            0.275 23.3406 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_102
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1.46958e-016 -2.30884 0.655183 0
            9.86705e-023 -0.655183 -2.30884 0
            0.25 1.47266e-017 -4.17899e-018 0
            -0.275 23.3406 21.1351 1
          }
          num_children 1
          Use MatrixTransform_38
        }
        MatrixTransform {
          UniqueID MatrixTransform_103
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 -8.84063e-023 9.70294e-015 0
            8.84063e-023 1 -2.24458e-015 0
            -9.70294e-015 2.24458e-015 1 0
            -2.98489e-030 27.9999 0.5 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_104
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            100 0 0 0
            0 100 0 0
            0 0 0.2 0
            0 0 -0.1 1
          }
          num_children 1
          Use MatrixTransform_31
        }
        MatrixTransform {
          UniqueID MatrixTransform_105
          nodeMask 0xffffffff
          cullingActive TRUE
          Use StateSet_21
          referenceFrame RELATIVE
          Matrix {
            1 0 0 0
            0 1 0 0
            0 0 1 0
            0 15 2 1
          }
          num_children 1
          Use MatrixTransform_31
        }
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_106
        DataVariance DYNAMIC
        name "ShapeGenerator::mWireFrame"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_65
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_107
        DataVariance DYNAMIC
        name "ShapeGenerator::mBackground"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_67
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_108
        DataVariance DYNAMIC
        name "ShapeGenerator::mStencil"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_69
      }
      VxGraphicsOSG::EffectNode {
        UniqueID EffectNode_109
        DataVariance DYNAMIC
        name "ShapeGenerator::mStipple"
        nodeMask 0xffffffff
        cullingActive TRUE
        Use StateSet_71
        num_children 27
        Use MatrixTransform_79
        Use MatrixTransform_80
        Use MatrixTransform_81
        Use MatrixTransform_82
        Use MatrixTransform_83
        Use MatrixTransform_84
        Use MatrixTransform_85
        Use MatrixTransform_86
        Use MatrixTransform_87
        Use MatrixTransform_88
        Use MatrixTransform_89
        Use MatrixTransform_90
        Use MatrixTransform_91
        Use MatrixTransform_92
        Use MatrixTransform_93
        Use MatrixTransform_94
        Use MatrixTransform_95
        Use MatrixTransform_96
        Use MatrixTransform_97
        Use MatrixTransform_98
        Use MatrixTransform_99
        Use MatrixTransform_100
        Use MatrixTransform_101
        Use MatrixTransform_102
        Use MatrixTransform_103
        Use MatrixTransform_104
        Use MatrixTransform_105
      }
    }
  }
  Geode {
    UniqueID Geode_110
    name "VxMouseSpringManipulator LineNode"
    nodeMask 0x9fffffff
    cullingActive TRUE
    StateSet {
      DataVariance DYNAMIC
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      GL_LIGHTING OFF
      Uniform {
        name "vxOSG_TexturedObject"
        type bool 1 IntArray 1
        {
          0 
        }
      }
      Uniform {
        name "vxOSG_ShadowEnabled"
        type bool 1 IntArray 1
        {
          0 
        }
      }
      Uniform {
        name "vxOSG_LightingEnabled"
        type bool 1 IntArray 1
        {
          0 
        }
      }
      Program {
        UniqueID Program_111
        name "CompiledProgram_3"
        GeometryVerticesOut 1
        GeometryInputType TRIANGLES
        GeometryOutputType TRIANGLE_STRIP
        num_shaders 2
        Shader {
          type VERTEX
          code {
            ""
            "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/line_colored.vert\""
            "#version 330 compatibility"
            ""
            "attribute vec4 osg_Vertex;"
            "attribute vec4 osg_Color;"
            "uniform mat4 osg_ModelViewProjectionMatrix;"
            "out vec4 colorV;"
            ""
            "void main()"
            "{"
            "   colorV = osg_Color;"
            "   gl_Position = osg_ModelViewProjectionMatrix * osg_Vertex;"
            "}"
          }
        }
        Shader {
          type FRAGMENT
          code {
            ""
            "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/line_colored.frag\""
            "#version 330 compatibility"
            "in vec4 colorV;"
            ""
            "void main()"
            "{"
            "   gl_FragColor = colorV;"
            "}"
          }
        }
      }
    }
    num_drawables 1
    Geometry {
      UniqueID Geometry_112
      DataVariance DYNAMIC
      name "LineNodegeometry"
      StateSet {
        DataVariance STATIC
        rendering_hint DEFAULT_BIN
        renderBinMode INHERIT
        GL_DEPTH_TEST ON
        Uniform {
          name "vxOSG_TexturedObject"
          type bool 1 IntArray 1
          {
            0 
          }
        }
        Uniform {
          name "vxOSG_ShadowEnabled"
          type bool 1 IntArray 1
          {
            0 
          }
        }
        Uniform {
          name "vxOSG_LightingEnabled"
          type bool 1 IntArray 1
          {
            0 
          }
        }
        LineWidth {
          width 1
        }
        Depth {
          function ALWAYS
          writeMask TRUE
          range 0 0
        }
      }
      supportsDisplayList FALSE
      useDisplayList FALSE
      useVertexBufferObjects TRUE
      PrimitiveSets 1
      {
        DrawArrays LINES 0 2
      }
      VertexArray Vec3Array 2
      {
        0 0 0
        0 0 0
      }
      ColorBinding PER_VERTEX
      ColorArray Vec4Array 2
      {
        1 1 1 1
        1 1 1 1
      }
    }
  }
  MatrixTransform {
    UniqueID MatrixTransform_113
    name "default_GraphicsDebugger_39"
    nodeMask 0xbfffffff
    cullingActive TRUE
    StateSet {
      UniqueID StateSet_114
      DataVariance STATIC
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      Uniform {
        name "vxOSG_TexturedObject"
        type bool 1 IntArray 1
        {
          1 
        }
      }
      Uniform {
        name "vxOSG_ShadowEnabled"
        type bool 1 IntArray 1
        {
          1 
        }
      }
    }
    referenceFrame RELATIVE
    Matrix {
      1 0 0 0
      0 1 0 0
      0 0 1 0
      0 0 0 1
    }
  }
  MatrixTransform {
    UniqueID MatrixTransform_115
    name "default_ApplicationDynamics Visualizer_190"
    nodeMask 0xbfffffff
    cullingActive TRUE
    StateSet {
      UniqueID StateSet_116
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      Uniform {
        name "vxOSG_TexturedObject"
        type bool 1 IntArray 1
        {
          1 
        }
      }
      Uniform {
        name "vxOSG_ShadowEnabled"
        type bool 1 IntArray 1
        {
          1 
        }
      }
    }
    referenceFrame RELATIVE
    Matrix {
      1 0 0 0
      0 1 0 0
      0 0 1 0
      0 0 0 1
    }
  }
  LightSource {
    UniqueID LightSource_117
    name "default_LightDirectional_158"
    nodeMask 0x9fffffff
    cullingActive FALSE
    StateSet {
      UniqueID StateSet_118
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      GL_LIGHT0 ON
    }
    referenceFrame RELATIVE
    Light {
      UniqueID Light_119
      name "default_LightDirectional_158"
      light_num 0
      ambient 0 0 0 1
      diffuse 1 1 1 1
      specular 1 1 1 1
      position -1 -0 -0 0
      direction 0 0 -1
      constant_attenuation 1
      linear_attenuation 0
      quadratic_attenuation 0
      spot_exponent 0
      spot_cutoff 180
    }
  }
  Group {
    UniqueID Group_120
    name "My CableSystems Graphics extension"
    nodeMask 0xbfffffff
    cullingActive TRUE
    StateSet {
      UniqueID StateSet_121
      rendering_hint DEFAULT_BIN
      renderBinMode INHERIT
      Uniform {
        UniqueID Uniform_122
        name "vxOSG_TexturedObject"
        type bool 1 IntArray 1
        {
          1 
        }
      }
      Uniform {
        UniqueID Uniform_123
        name "vxOSG_ShadowEnabled"
        type bool 1 IntArray 1
        {
          1 
        }
      }
      textureUnit 0 {
        TexMat {
          1 0 0 0
          0 1 0 0
          0 0 1 0
          0 0 0 1
        }
      }
    }
    num_children 1
    Geode {
      UniqueID Geode_124
      DataVariance DYNAMIC
      nodeMask 0xffffffff
      cullingActive TRUE
      StateSet {
        UniqueID StateSet_125
        DataVariance DYNAMIC
        rendering_hint DEFAULT_BIN
        renderBinMode INHERIT
        Program {
          UniqueID Program_126
          name "CompiledProgram_9"
          GeometryVerticesOut 1
          GeometryInputType TRIANGLES
          GeometryOutputType TRIANGLE_STRIP
          AttribBindingLocation osg_Color 3
          AttribBindingLocation osg_FogCoord 5
          AttribBindingLocation osg_MultiTexCoord0 8
          AttribBindingLocation osg_MultiTexCoord1 9
          AttribBindingLocation osg_MultiTexCoord2 10
          AttribBindingLocation osg_Normal 2
          AttribBindingLocation osg_SecondaryColor 4
          AttribBindingLocation osg_Vertex 0
          AttribBindingLocation tangentAttrib 11
          num_shaders 3
          Shader {
            type VERTEX
            code {
              "#define DIFFUSE_MAP 0"
              "#define DIRECTIONAL_LIGHT_COUNT 1"
              "#define FLOW_ANIM 0"
              "#define GENERATE_TANGENT_SPACE 1"
              "#define HEIGHT_FIELD_BLENDING 0"
              "#define HEIGHT_FIELD_EDITION_MODE 0"
              "#define HOLES 0"
              "#define INSTANCING 0"
              "#define MATERIAL 1"
              "#define NORMAL_MAP 0"
              "#define OUTPUT_GBUFFER 0"
              "#define PARTICLES 0"
              "#define POINT_LIGHT_COUNT 0"
              "#define PROJECTIVE_LIGHT_COUNT 0"
              "#define SHADOW 1"
              "#define SPECULAR_MAP 0"
              "#define SPOT_LIGHT_COUNT 0"
              "#define TERRAIN_BLENDING 0"
              "#define TRIPLANAR 0"
              "#define TRIPLANAR_BLENDING 0"
              "#define USE_GEOMETRY_SHADER_PIPELINE 1"
              ""
              "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.vert\""
              "#version 150 compatibility"
              ""
              "#define MAX_INSTANCES 1024"
              ""
              "layout(packed) uniform transforms"
              "{"
              "    mat4 transformsArray[MAX_INSTANCES];"
              "};"
              ""
              "layout(packed) uniform texCoords"
              "{"
              "    float texCoordsArray[MAX_INSTANCES];"
              "};"
              ""
              "in vec4 osg_Vertex;"
              "in vec3 osg_Normal;"
              "in vec4 osg_MultiTexCoord0;"
              "in vec4 osg_Color;"
              ""
              "uniform mat3 osg_NormalMatrix;"
              "uniform mat4 osg_ModelViewMatrix;"
              "uniform mat4 osg_ModelViewProjectionMatrix;"
              "uniform vec4 color;"
              ""
              "out vec4 positionViewA;"
              "out vec4 positionViewB;"
              "out vec4 positionProjA;"
              "out vec4 positionProjB;"
              "out vec3 normalA;"
              "out vec3 normalB;"
              "out vec2 texCoordA;"
              "out vec2 texCoordB;"
              "out mat4 shadowMatrixTransposed;"
              "out vec4 vertexColor;"
              ""
              "#line 0 \"shadowMapVD_shadow.vert\""
              "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//   http://www.cm-labs.com"
              "//"
              "//   $Name: shadowMapVD_shadows.vert $"
              "//"
              "//   Date: $Date: 2012/02/29 11:02:19 $"
              "//"
              "//   This software and its accompanying manuals have been developed by CMLabs"
              "//   Simulations Inc. (\"CMLabs\")."
              "//"
              "//   The copyright to the Vortex Toolkits and all associated materials"
              "//   belongs to CMLabs."
              "//"
              "//   All intellectual property rights in the software belong to CMLabs."
              "//"
              "//   All rights conferred by law (including rights under international"
              "//   copyright conventions) are reserved to CMLabs. This software may also"
              "//   incorporate information which is confidential to CMLabs."
              "//"
              "//   Save to the extent permitted by law, or as otherwise expressly permitted"
              "//   by CMLabs, this software and the manuals must not be copied (in whole or"
              "//   in part), re-arranged, altered or adapted in any way without the prior"
              "//   written consent of CMLabs. In addition, the information contained in the"
              "//   software may not be disseminated without the prior written consent of"
              "//   CMLabs."
              ""
              "#line 0 \"shadowMapVD_shadow_common.glsl\""
              "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//   http://www.cm-labs.com"
              "//"
              "//   $Name: shadowMapVD_shadows.vert $"
              "//"
              "//   Date: $Date: 2012/02/29 11:02:19 $"
              "//"
              "//   This software and its accompanying manuals have been developed by CMLabs"
              "//   Simulations Inc. (\"CMLabs\")."
              "//"
              "//   The copyright to the Vortex Toolkits and all associated materials"
              "//   belongs to CMLabs."
              "//"
              "//   All intellectual property rights in the software belong to CMLabs."
              "//"
              "//   All rights conferred by law (including rights under international"
              "//   copyright conventions) are reserved to CMLabs. This software may also"
              "//   incorporate information which is confidential to CMLabs."
              "//"
              "//   Save to the extent permitted by law, or as otherwise expressly permitted"
              "//   by CMLabs, this software and the manuals must not be copied (in whole or"
              "//   in part), re-arranged, altered or adapted in any way without the prior"
              "//   written consent of CMLabs. In addition, the information contained in the"
              "//   software may not be disseminated without the prior written consent of"
              "//   CMLabs."
              ""
              "#ifndef SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
              "#define SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
              ""
              "#if SHADOW"
              "uniform int shadowTextureUnit0;"
              ""
              "mat4 getShadowMatrixTransposed()"
              "{"
              "    mat4 shadowMatrixTransposed;"
              "    shadowMatrixTransposed[0] = gl_EyePlaneS[shadowTextureUnit0];"
              "    shadowMatrixTransposed[1] = gl_EyePlaneT[shadowTextureUnit0];"
              "    shadowMatrixTransposed[2] = gl_EyePlaneR[shadowTextureUnit0];"
              "    shadowMatrixTransposed[3] = gl_EyePlaneQ[shadowTextureUnit0];"
              "    return shadowMatrixTransposed;"
              "}"
              ""
              "vec4 getShadowTexCoord(in vec3 position, in mat4 shadowMatrixTransposed)"
              "{"
              "    return vec4(position, 1) * shadowMatrixTransposed;"
              "}"
              "#endif"
              ""
              "#endif"
              ""
              "#line 28 \"shadowMapVD_shadow.vert\""
              ""
              "#if SHADOW"
              "out vec4 shadowTextureCoord;"
              ""
              "mat4 DynamicShadow()"
              "{"
              "    return getShadowMatrixTransposed();"
              "}"
              ""
              "void DynamicShadowPipeline( in vec3 ecPosition )"
              "{"
              "    shadowTextureCoord = getShadowTexCoord(ecPosition, getShadowMatrixTransposed());"
              "}"
              "#endif"
              ""
              "#line 36 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.vert\""
              ""
              "void main(void)"
              "{"
              "    // Process and output vertex informations for two cable control points (A and B)"
              "    "
              "    // Transform position"
              "    mat4 transformA = transformsArray[gl_InstanceID + 0];"
              "    mat4 transformB = transformsArray[gl_InstanceID + 1];"
              "    vec4 vertexA = transformA * osg_Vertex;"
              "    vec4 vertexB = transformB * osg_Vertex;"
              "    positionViewA = osg_ModelViewMatrix * vertexA;"
              "    positionViewB = osg_ModelViewMatrix * vertexB;"
              "    positionProjA = osg_ModelViewProjectionMatrix * vertexA;"
              "    positionProjB = osg_ModelViewProjectionMatrix * vertexB;"
              "    "
              "    // Transform normal"
              "    normalA = osg_NormalMatrix * mat3(transformA) * osg_Normal;"
              "    normalB = osg_NormalMatrix * mat3(transformB) * osg_Normal;"
              "    "
              "    // Transform texture coordinates"
              "    texCoordA = (gl_TextureMatrix[0] * vec4(texCoordsArray[gl_InstanceID + 0], osg_MultiTexCoord0.x, 0, 1)).xy + vec2(osg_MultiTexCoord0.y, 0);"
              "    texCoordB = (gl_TextureMatrix[0] * vec4(texCoordsArray[gl_InstanceID + 1], osg_MultiTexCoord0.x, 0, 1)).xy + vec2(osg_MultiTexCoord0.y, 0);"
              ""
              "    // Get shadow map matrix from predefined GL uniforms not available in the geometry shader"
              "    #if SHADOW"
              "    shadowMatrixTransposed = DynamicShadow();"
              "    #endif"
              ""
              "    vertexColor = color * osg_Color;"
              "}"
            }
          }
          Shader {
            type FRAGMENT
            code {
              "#define DIFFUSE_MAP 0"
              "#define DIRECTIONAL_LIGHT_COUNT 1"
              "#define FLOW_ANIM 0"
              "#define GENERATE_TANGENT_SPACE 1"
              "#define HEIGHT_FIELD_BLENDING 0"
              "#define HEIGHT_FIELD_EDITION_MODE 0"
              "#define HOLES 0"
              "#define INSTANCING 0"
              "#define MATERIAL 1"
              "#define NORMAL_MAP 0"
              "#define OUTPUT_GBUFFER 0"
              "#define PARTICLES 0"
              "#define POINT_LIGHT_COUNT 0"
              "#define PROJECTIVE_LIGHT_COUNT 0"
              "#define SHADOW 1"
              "#define SPECULAR_MAP 0"
              "#define SPOT_LIGHT_COUNT 0"
              "#define TERRAIN_BLENDING 0"
              "#define TRIPLANAR 0"
              "#define TRIPLANAR_BLENDING 0"
              "#define USE_GEOMETRY_SHADER_PIPELINE 1"
              ""
              "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.frag\""
              "#version 150 compatibility"
              ""
              "#line 0 \"material_common.frag\""
              "//    Copyright (c) 2000-2007 CMLabs Simulations Inc."
              "//"
              "//    http://www.cm-labs.com"
              "//"
              "//    $Name: material_common.frag $"
              "//"
              "//    Date: $Date: 2012/11/02 16:57:00 $"
              "//"
              "//    This software and its accompanying manuals have been developed by CMLabs"
              "//    Simulations Inc. (\\\"CMLabs\\\")."
              "//"
              "//    The copyright to the Vortex Toolkits and all associated materials"
              "//    belongs to CMLabs."
              "//"
              "//    All intellectual property rights in the software belong to CMLabs."
              "//"
              "//    All rights conferred by law (including rights under international"
              "//    copyright conventions) are reserved to CMLabs. This software may also"
              "//    incorporate information which is confidential to CMLabs."
              "//"
              "//    Save to the extent permitted by law, or as otherwise expressly permitted"
              "//    by CMLabs, this software and the manuals must not be copied (in whole or"
              "//    in part), re-arranged, altered or adapted in any way without the prior"
              "//    written consent of CMLabs. In addition, the information contained in the"
              "//    software may not be disseminated without the prior written consent of"
              "//    CMLabs."
              ""
              "#ifndef MATERIAL_COMMON_FRAG"
              "#define MATERIAL_COMMON_FRAG"
              ""
              "uniform bool vxOSG_TexturedObject;"
              "uniform bool vxOSG_FogEnabled;"
              "uniform vec4 vxOSG_FogColor;"
              "uniform float vxOSG_FogDensity;"
              "uniform bool vxOSG_IsBelowWater;"
              "in vec4 vxg_vertexColor;"
              "in vec4 vxg_FragPosition;"
              ""
              "float getFogDensityFromDistance(float distance)"
              "{"
              "    // This formula is the inverse of the exp2 formula of the fog computation"
              "    // The fog value will always be 0,01 at the distance given by the user"
              "    const float fogValue = 0.01;"
              "    return  sqrt(-1.0 * log(fogValue)) / distance;"
              "}"
              ""
              "vec4 materialColor(sampler2D baseTexture, vec2 texCoords)"
              "{"
              "    vec4 color;"
              ""
              "    if (vxOSG_TexturedObject)"
              "    {"
              "        // obtain texture color at fragment"
              "        color = texture2D(baseTexture, texCoords);"
              "    }"
              "    else"
              "    {"
              "        color = vec4(1.0);"
              "    }"
              "    return color;"
              "}"
              ""
              "vec4 vertexColor(vec4 color)"
              "{"
              "    return color * vxg_vertexColor;"
              "}"
              ""
              "vec4 materialFog(vec4 color)"
              "{"
              "    if(vxOSG_FogEnabled)"
              "    {"
              "        float density = getFogDensityFromDistance( vxOSG_FogDensity );"
              "        float distance = length(vxg_FragPosition.xyz);"
              ""
              "        vec4 fog_color = vxOSG_FogColor;"
              ""
              "        const float LOG2 = 1.442695;"
              "        float fog = exp(-density * density * distance * distance * LOG2);"
              "        fog = clamp(fog, 0.0, 1.0);"
              ""
              "        // Mix the fog color with the base color with shadows."
              "        color = vec4(mix(vec3(fog_color), vec3(color), fog), color.a);"
              "    }"
              "    return color;"
              "}"
              ""
              "vec4 materialFade(vec4 color)"
              "{"
              "    float fade = clamp(gl_FragCoord.z * 16.0, 0.0, 1.0);"
              "    color = vec4(color.rgb, color.a * fade);"
              "    return color;"
              "}"
              ""
              "#endif"
              ""
              "#line 3 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.frag\""
              "#line 0 \"shadowMapVD_shadow.frag\""
              "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//   http://www.cm-labs.com"
              "//"
              "//   $Name: shadowMapVD_shadows.frag $"
              "//"
              "//   Date: $Date: 2012/02/29 11:01:17 $"
              "//"
              "//   This software and its accompanying manuals have been developed by CMLabs"
              "//   Simulations Inc. (\"CMLabs\")."
              "//"
              "//   The copyright to the Vortex Toolkits and all associated materials"
              "//   belongs to CMLabs."
              "//"
              "//   All intellectual property rights in the software belong to CMLabs."
              "//"
              "//   All rights conferred by law (including rights under international"
              "//   copyright conventions) are reserved to CMLabs. This software may also"
              "//   incorporate information which is confidential to CMLabs."
              "//"
              "//   Save to the extent permitted by law, or as otherwise expressly permitted"
              "//   by CMLabs, this software and the manuals must not be copied (in whole or"
              "//   in part), re-arranged, altered or adapted in any way without the prior"
              "//   written consent of CMLabs. In addition, the information contained in the"
              "//   software may not be disseminated without the prior written consent of"
              "//   CMLabs."
              ""
              "//----------------------------------------------------------------------------"
              "// Shadow fragment shader"
              "//----------------------------------------------------------------------------"
              "// following expressions are auto modified - do not change them:"
              "// vxg_TexCoord7  7 - can be subsituted with other index"
              "#if SHADOW"
              "uniform sampler2DShadow shadowTexture0;"
              "uniform int shadowTextureUnit0;"
              ""
              "// Filtering modes."
              "// Any filtering is better than no filtering, because it makes the edges of"
              "// shadows look softer. Of course, the softness is not physically correct"
              "// because the \"soft part\" (which is meant to approximate the penumbra) does"
              "// not get larger as the shadow goes away from the casting object. But it"
              "// still looks better."
              "//"
              "// The modes here are listed in order of quality, worst to best. Of course,"
              "// they are also in order of least GPU intensive to most. At low shadow map"
              "// resolutions, the 4 sample filter is merely adequate, and the 16 sample one"
              "// looks much better. But at higher shadow map resolutions, the 4 sample and"
              "// the 16 sample filters are almost identical in quality. So it's a tradeoff,"
              "// do you use a low SM resolution (512x512) and filter more, or use higher"
              "// SM resolution (2048x2048) and can filter less to still get good quality."
              ""
              "#define FILTER_NONE 0"
              "#define FILTER_4_SAMPLES 1"
              "#define FILTER_4_SAMPLES_DITHERED 2"
              "#define FILTER_16_SAMPLES 3"
              ""
              "#define FILTER_METHOD FILTER_16_SAMPLES"
              ""
              ""
              "#define XOFFSET 1.0/(1024.0*2.0)"
              "#define YOFFSET 1.0/(768.0*2.0)"
              ""
              "in vec4 shadowTextureCoord;"
              ""
              "// Helps prevent shadow acne. 0.0 is no bias; you want negative values. Too"
              "// high values (close to 0) will cause self-shadowing for some texels which"
              "// makes it look like the shadow has \"moire\" patterns on surfaces in light,"
              "// whereas too low values (far from 0) will make the shadow separate from the"
              "// base of objects. The best value might depend on the scene."
              "#define BIAS -0.000001"
              ""
              "float offset_lookup(vec4 loc, vec2 offset)"
              "{"
              "    return shadow2DProj(shadowTexture0, loc + vec4(offset.x * XOFFSET * loc.w,"
              "                                                  offset.y * YOFFSET * loc.w,"
              "                                                  BIAS,"
              "                                                  0.0) ).r;"
              "}"
              ""
              ""
              "float DynamicShadow( )"
              "{"
              "#if FILTER_METHOD == FILTER_NONE"
              "    // No filtering, single lookup - about as fast as it can get."
              "    // Will show some shadow acne, but this can't really be helped."
              "    return shadow2DProj( shadowTexture0, shadowTextureCoord ).r;"
              "#elif FILTER_METHOD == FILTER_4_SAMPLES"
              "    // This runs in about 1.5 times the GPU time of the one lookup version"
              "    // above (because of cache coherence no doubt), so there's no real"
              "    // drawback to using it (other than it looks less good than the 16 sample"
              "    // version)."
              "    // It takes advantage of the fact that shadow2DProj automatically takes 4"
              "    // samples at -0.5 to 0.5 of the given position and returns the average on"
              "    // nVidia cards. We can thus do only 4 calls at 2 pixels distance to get"
              "    // almost as good a result as 16 normal samples."
              "    float sum = 0.0;"
              ""
              "    sum += offset_lookup(shadowTextureCoord, vec2(-1.5,  0.5));"
              "    sum += offset_lookup(shadowTextureCoord, vec2( 0.5,  0.5));"
              "    sum += offset_lookup(shadowTextureCoord, vec2(-1.5, -1.5));"
              "    sum += offset_lookup(shadowTextureCoord, vec2( 0.5, -1.5));"
              ""
              "    return sum * 0.25;      // sum / 4"
              "#elif FILTER_METHOD == FILTER_4_SAMPLES_DITHERED"
              "    // About as fast as the other 4 sample method above, gives better results"
              "    // from close up but worse results (slightly pixelated) from far away."
              "    // From the Orange book."
              "    vec2 offset = mod(floor(gl_FragCoord.xy), 2.0);"
              ""
              "    float sum = 0.0;"
              ""
              "    sum += offset_lookup(shadowTextureCoord, offset + vec2(-1.5,  0.5));"
              "    sum += offset_lookup(shadowTextureCoord, offset + vec2( 0.5,  0.5));"
              "    sum += offset_lookup(shadowTextureCoord, offset + vec2(-1.5, -1.5));"
              "    sum += offset_lookup(shadowTextureCoord, offset + vec2( 0.5, -1.5));"
              ""
              "    return sum * 0.25;      // sum / 4"
              "#else   // if FILTER_METHOD == FILTER_16_SAMPLES"
              "    // Costly (roughly twice the 4 sample versions in GPU time) but looks"
              "    // really smooth."
              "    float sum = 0.0;"
              ""
              "    for (float y = -1.5; y <= 1.5; y += 1.0)"
              "        for (float x = -1.5; x <= 1.5; x += 1.0)"
              "            sum += offset_lookup(shadowTextureCoord, vec2(x, y));"
              ""
              "    return sum * 0.0625;    // sum / 16"
              "#endif"
              "}"
              ""
              "#endif"
              ""
              "#line 4 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.frag\""
              "#line 0 \"uber_lighting.frag\""
              "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//    http://www.cm-labs.com"
              "//"
              "//    $Name: uber_lighting.frag $"
              "//"
              "//    Date: $Date: 2012/02/29 11:00:00 $"
              "//"
              "//    This software and its accompanying manuals have been developed by CMLabs"
              "//    Simulations Inc. (\\\"CMLabs\\\")."
              "//"
              "//    The copyright to the Vortex Toolkits and all associated materials"
              "//    belongs to CMLabs."
              "//"
              "//    All intellectual property rights in the software belong to CMLabs."
              "//"
              "//    All rights conferred by law (including rights under international"
              "//    copyright conventions) are reserved to CMLabs. This software may also"
              "//    incorporate information which is confidential to CMLabs."
              "//"
              "//    Save to the extent permitted by law, or as otherwise expressly permitted"
              "//    by CMLabs, this software and the manuals must not be copied (in whole or"
              "//    in part), re-arranged, altered or adapted in any way without the prior"
              "//    written consent of CMLabs. In addition, the information contained in the"
              "//    software may not be disseminated without the prior written consent of"
              "//    CMLabs."
              ""
              "#ifndef UBER_LIGHTING_FRAG"
              "#define UBER_LIGHTING_FRAG"
              ""
              "#line 0 \"lighting_common.glsl\""
              "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//    http://www.cm-labs.com"
              "//"
              "//    $Name: lighting_common.glsl $"
              "//"
              "//    Date: $Date: 2012/11/01 12:17:00 $"
              "//"
              "//    This software and its accompanying manuals have been developed by CMLabs"
              "//    Simulations Inc. (\\\"CMLabs\\\")."
              "//"
              "//    The copyright to the Vortex Toolkits and all associated materials"
              "//    belongs to CMLabs."
              "//"
              "//    All intellectual property rights in the software belong to CMLabs."
              "//"
              "//    All rights conferred by law (including rights under international"
              "//    copyright conventions) are reserved to CMLabs. This software may also"
              "//    incorporate information which is confidential to CMLabs."
              "//"
              "//    Save to the extent permitted by law, or as otherwise expressly permitted"
              "//    by CMLabs, this software and the manuals must not be copied (in whole or"
              "//    in part), re-arranged, altered or adapted in any way without the prior"
              "//    written consent of CMLabs. In addition, the information contained in the"
              "//    software may not be disseminated without the prior written consent of"
              "//    CMLabs."
              ""
              "#ifndef LIGHTING_COMMON_GLSL"
              "#define LIGHTING_COMMON_GLSL"
              ""
              "// it should be fix in slave. Seems it is not included into the slave shader side."
              "#define MAX_NUM_LIGHTS 8"
              "#define MAX_NUM_PROJECTIVE_LIGHTS 2"
              ""
              "uniform int vxOSG_LightsType[MAX_NUM_LIGHTS];"
              "uniform int vxOSG_ProjectiveLightID[MAX_NUM_LIGHTS];"
              "uniform float vxOSG_SpotCosInnerCone[MAX_NUM_LIGHTS];//inner radius' cosinus"
              "uniform float vxOSG_SpotCosOuterCone[MAX_NUM_LIGHTS];//outer radius' cosinus"
              "uniform int vxOSG_ShadowCastingLight;//shadow caster light's id"
              "uniform vec4 vxOSG_LightingAmbient;"
              "uniform bool vxOSG_ShadowEnabled;"
              ""
              "uniform bool vxOSG_DepthPass;"
              ""
              "uniform float projectiveTextureMinDistance[MAX_NUM_PROJECTIVE_LIGHTS];"
              "uniform float projectiveTextureMaxDistance[MAX_NUM_PROJECTIVE_LIGHTS];"
              "uniform mat4 projectiveTextureTransform[MAX_NUM_PROJECTIVE_LIGHTS];"
              ""
              "uniform sampler2DArray projectiveLightTextureArray;"
              ""
              "// ------ Directional light -------------------------------------------------"
              "void DirectionalLight(in vec3 eyeVec,"
              "                      in vec3 normal,"
              "                      in gl_LightSourceParameters lightParameters,"
              "                      in gl_MaterialParameters material,"
              "                      inout vec3 diffuse,"
              "                      inout vec3 specular,"
              "                      in float shadowMask)"
              "{"
              "    float nDotL;         // normal . light direction"
              "    float nDotH;         // normal . light half vector"
              "    float pf;            // power factor"
              "    vec3 lightVec;       // light vector"
              "    vec3 halfVec;        // half vector"
              ""
              "    lightVec = lightParameters.position.xyz;"
              "    halfVec = normalize(lightVec + eyeVec);"
              ""
              "    nDotL = max(0.0, dot(normal, normalize(lightVec)));"
              "    nDotH = max(0.0, dot(normal, normalize(halfVec)));"
              ""
              "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
              ""
              "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL;"
              "    specular += shadowMask * lightParameters.specular.rgb * nDotL * pf;"
              "}"
              ""
              "// ------ Point light -------------------------------------------------------"
              "void PointLight(in vec3 eyeVec,"
              "                in vec3 ecPosition3,"
              "                in vec3 normal,"
              "                in gl_LightSourceParameters lightParameters,"
              "                in gl_MaterialParameters material,"
              "                inout vec3 diffuse,"
              "                inout vec3 specular,"
              "                in float shadowMask)"
              "{"
              "    float nDotL;      // normal . light direction"
              "    float nDotH;      // normal . light half vector"
              "    float pf;          // power factor"
              "    float attenuation; // computed attenuation factor"
              "    float d;           // distance from surface to light source"
              "    vec3  lightVec;          // direction from surface to light position"
              "    vec3  halfVec;  // direction of maximum highlights"
              ""
              "    // Compute vector from surface to light position"
              "    lightVec = vec3(lightParameters.position) - ecPosition3;"
              ""
              "    // Compute distance between surface and light position"
              "    d = length(lightVec);"
              ""
              "    // Normalize the vector from surface to light position"
              "    lightVec = normalize(lightVec);"
              ""
              "    // Compute attenuation"
              "    attenuation = 1.0 / (lightParameters.constantAttenuation +"
              "                         lightParameters.linearAttenuation * d +"
              "                         lightParameters.quadraticAttenuation * d*d);"
              ""
              "    halfVec = normalize(lightVec + eyeVec);"
              ""
              "    nDotL = max(0.0, dot(normal, lightVec));"
              "    nDotH = max(0.0, dot(normal, halfVec));"
              ""
              "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
              ""
              "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL * attenuation;"
              "    specular += shadowMask * lightParameters.specular.rgb * nDotL * pf * attenuation;"
              "}"
              ""
              "// ------ Spot light --------------------------------------------------------"
              "void SpotLight(in vec3 eyeVec,"
              "               in vec3 ecPosition3,"
              "               in vec3 normal,"
              "               in float cosInnerCone,"
              "               in float cosOuterCone,"
              "               in gl_LightSourceParameters lightParameters,"
              "               in gl_MaterialParameters material,"
              "               inout vec3 diffuse,"
              "               inout vec3 specular,"
              "               in float shadowMask)"
              "{"
              "    float nDotL;          // normal . light direction"
              "    float nDotH;          // normal . light half vector"
              "    float pf;              // power factor"
              "    float spotDot;         // cosine of angle between spotlight"
              "    float spotAttenuation; // spotlight attenuation factor"
              "    float attenuation;     // computed attenuation factor"
              "    float d;               // distance from surface to light source"
              "    vec3 lightVec;               // direction from surface to light position"
              "    vec3 halfVec;       // direction of maximum highlights"
              ""
              "    // Compute vector from surface to light position"
              "    lightVec = vec3(lightParameters.position) - ecPosition3;"
              ""
              "    // Compute distance between surface and light position"
              "    d = length(lightVec);"
              ""
              "    // Normalize the vector from surface to light position"
              "    lightVec = normalize(lightVec);"
              ""
              "    // Compute attenuation"
              "    attenuation = 1.0 / (lightParameters.constantAttenuation +"
              "                         lightParameters.linearAttenuation * d +"
              "                         lightParameters.quadraticAttenuation *d*d);"
              ""
              "    // See if point on surface is inside cone of illumination"
              "    spotDot = max(0.0, dot(-lightVec, normalize(lightParameters.spotDirection)));"
              ""
              "    spotAttenuation = (spotDot - cosOuterCone) / (cosInnerCone - cosOuterCone);"
              "    spotAttenuation = clamp(spotAttenuation, 0.0, 1.0);"
              ""
              "    // Combine the spotlight and distance attenuation."
              "    attenuation *= spotAttenuation;"
              ""
              "    halfVec = normalize(lightVec + eyeVec);"
              ""
              "    nDotL = max(0.0, dot(normal, lightVec));"
              "    nDotH = max(0.0, dot(normal, halfVec));"
              ""
              "    pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
              ""
              "    diffuse += shadowMask * lightParameters.diffuse.rgb * nDotL * attenuation;"
              "    specular += shadowMask * lightParameters.specular.rgb * pf * nDotL * attenuation;"
              "}"
              ""
              "// ------ Directional light -------------------------------------------------"
              "void ProjectiveTextureLight( in vec3 eyeVec,"
              "                             in vec3 ecPosition3,"
              "                             in vec3 normal,"
              "                             in int projectiveLightID,"
              "                             in gl_LightSourceParameters lightParameters,"
              "                             in gl_MaterialParameters material,"
              "                             inout vec3 diffuse,"
              "                             inout vec3 specular )"
              "{"
              "    if(gl_TexCoord[projectiveLightID+3].q>0.0 )"
              "    {"
              ""
              "        float nDotL;          // normal . light direction"
              "        float nDotH;          // normal . light half vector"
              "        vec3 halfVec;         // direction of maximum highlights"
              "        float pf;             // power factor"
              ""
              "        vec3 lightVec;"
              "        float d;              // distance between fragment to the light source"
              ""
              "        vec2 projCoords = gl_TexCoord[projectiveLightID+3].st / gl_TexCoord[projectiveLightID+3].q;"
              "        vec3 projTextureColor0 = texture(projectiveLightTextureArray, vec3(projCoords, projectiveLightID*2 + 0)).rgb;"
              "        vec3 projTextureColor1 = texture(projectiveLightTextureArray, vec3(projCoords, projectiveLightID*2 + 1)).rgb;"
              ""
              "        mat4 m = projectiveTextureTransform[projectiveLightID];"
              "        if( m[2][3] == 0.0 )  // Orthogonal projection"
              "       {"
              "           vec3 planeNormal = normalize(lightParameters.spotDirection);"
              "           lightVec = -planeNormal; // for ortho we treat it as direction light"
              ""
              "           // d component of the plane equation"
              "           d = dot(planeNormal, (ecPosition3 - vec3(lightParameters.position)));"
              "        }"
              "        else   // Perspective projection"
              "        {"
              "            // Compute vector from surface to light position"
              "            lightVec = vec3(lightParameters.position) - ecPosition3;"
              ""
              "            // Compute distance between surface and light position"
              "            d = length(lightVec);"
              "            lightVec = lightVec / d;"
              "        }"
              ""
              "        d = clamp(d, projectiveTextureMinDistance[projectiveLightID], projectiveTextureMaxDistance[projectiveLightID]);"
              ""
              "        float blendFactor = (d - projectiveTextureMinDistance[projectiveLightID]) / ( projectiveTextureMaxDistance[projectiveLightID] - projectiveTextureMinDistance[projectiveLightID]);"
              "        vec3 color = mix(projTextureColor0, projTextureColor1, blendFactor);"
              ""
              "        halfVec = normalize(lightVec + eyeVec);"
              ""
              "        nDotL = max(0.0, dot(normal, lightVec));"
              "        nDotH = max(0.0, dot(normal, halfVec));"
              "        pf = material.shininess < 1.0 ? 0.0 : pow(nDotH, material.shininess);"
              ""
              "        // final color"
              "        diffuse  += color * lightParameters.diffuse.rgb  * nDotL;"
              "        specular += color * pf * nDotL;"
              "    }"
              "}"
              ""
              "void lighting_accumulateLighting(vec3 vPosition, vec3 vNormal, gl_MaterialParameters material, out vec3 diffuse, out vec3 specular)"
              "{"
              "    vec3 eyeVec  = normalize(vec3(0.0, 0.0, 0.0) - vPosition); // vector from the vertex position to the eye position which is the origin in view space"
              "    vec3 normal = normalize(vNormal);"
              ""
              "    // Clear the light intensity accumulators"
              "    diffuse = specular = vec3(0.0);"
              ""
              "    const int Disabled = 0;"
              "    const int Directional = 1;"
              "    const int Point = 2;"
              "    const int Spot = 3;"
              "    const int ProjectiveTexture = 4;"
              ""
              "#if SHADOW"
              "    float shadowValue = vxOSG_ShadowEnabled ? DynamicShadow() : 1.0;"
              "#endif"
              ""
              "    #pragma optionNV(unroll all)"
              ""
              "    int i = 0;"
              "    int last = 0;"
              ""
              "    // Directional lights"
              "    last += DIRECTIONAL_LIGHT_COUNT;"
              "    for (;i < last; ++i)"
              "    {"
              "        // Adds the contribution of each lights whenever it is shadow caster or not."
              "        // Only the mask helps us to determine if it's casting shadow or not"
              "        float shadowMask = 1.0;"
              "#if SHADOW"
              "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
              "#endif"
              "        DirectionalLight(eyeVec, normal, gl_LightSource[i], material, diffuse, specular, shadowMask);"
              "    }"
              ""
              "    // Point lights"
              "    last += POINT_LIGHT_COUNT;"
              "    for (;i < last; ++i)"
              "    {"
              "        // Adds the contribution of each lights whenever it is shadow caster or not."
              "        // Only the mask helps us to determine if it's casting shadow or not"
              "        float shadowMask = 1.0;"
              "#if SHADOW"
              "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
              "#endif"
              "        PointLight(eyeVec, vPosition, normal, gl_LightSource[i], material, diffuse, specular, shadowMask);"
              "    }"
              ""
              "    // Spot lights"
              "    last += SPOT_LIGHT_COUNT;"
              "    for (;i < last; ++i)"
              "    {"
              "        // Adds the contribution of each lights whenever it is shadow caster or not."
              "        // Only the mask helps us to determine if it's casting shadow or not"
              "        float shadowMask = 1.0;"
              "#if SHADOW"
              "        shadowMask = (i == vxOSG_ShadowCastingLight) ? shadowValue : 1.0;"
              "#endif"
              "        SpotLight(eyeVec, vPosition, normal, vxOSG_SpotCosInnerCone[i], vxOSG_SpotCosOuterCone[i], gl_LightSource[i], material, diffuse, specular, shadowMask);"
              "    }"
              ""
              "    // Projective lights"
              "    last += PROJECTIVE_LIGHT_COUNT;"
              "    for (;i < last; ++i)"
              "    {"
              "        ProjectiveTextureLight(eyeVec, vPosition, normal, vxOSG_ProjectiveLightID[i], gl_LightSource[i], material, diffuse, specular);"
              "    }"
              "}"
              ""
              "vec4 lighting_applyOnMaterial(gl_MaterialParameters material, vec4 textureColor, vec3 lightDiffuse, vec3 lightSpecular)"
              "{"
              "    // Emissive contribution"
              "    vec3 emissive = material.emission.rgb;"
              "    "
              "    // Ambient contribution"
              "    vec3 ambient = vxOSG_LightingAmbient.rgb * material.ambient.rgb;"
              "    "
              "    // Diffuse contribution"
              "    vec3 diffuse = lightDiffuse.rgb * material.diffuse.rgb;"
              ""
              "    // Specular contribution"
              "    vec3 specular = lightSpecular.rgb * material.specular.rgb;"
              ""
              "    // Total contribution (Maya model)"
              "    vec3 diffuseTextured = emissive + ambient + diffuse;"
              "    vec3 notDiffuseTextured = specular;"
              "    "
              "    // We keep the color and alpha components separate for readability."
              "    vec4 color = vec4("
              "        textureColor.rgb * diffuseTextured + notDiffuseTextured,"
              "        textureColor.a * material.diffuse.a);"
              "    return color;"
              "}"
              ""
              "vec4 lighting_implementation(in vec3 vPosition, in vec3 vNormal, in vec4 textureColor, in gl_MaterialParameters material, in bool enableShadows)"
              "{"
              "    if(!vxOSG_DepthPass)"
              "    {"
              "        // Compute the contribution for each light."
              "        vec3 diffuse, specular;"
              "        lighting_accumulateLighting(vPosition, vNormal, material, diffuse, specular);"
              "        return lighting_applyOnMaterial(material, textureColor, diffuse, specular);"
              "    }"
              "    else"
              "    {"
              "        return vec4(textureColor);"
              "    }"
              "}"
              ""
              "#endif"
              ""
              "#line 31 \"uber_lighting.frag\""
              ""
              "in vec3 vNormal;"
              "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
              "in vec3 vTangent;"
              "#endif"
              "in vec3 vecPosition3;"
              ""
              "uniform bool vxOSG_LightingEnabled;"
              ""
              "vec3 getPosition()"
              "{"
              "    return vecPosition3;"
              "}"
              ""
              "vec3 getNormal()"
              "{"
              "    return normalize(vNormal);"
              "}"
              ""
              "#if MATERIAL && NORMAL_MAP"
              "// http://www.thetenthplanet.de/archives/1180"
              "// This function generates a tangent space using partial derivatives of position"
              "// and texture coordinates instead of precomputed vertex attributes. It is a"
              "// little more expansive than tangent space vertex attributes but some tests"
              "// have shown that the overhead was close to nothing. It can be used in cases"
              "// where the tangent space is too expansive or complex to generate on the CPU"
              "// like procedural geometry."
              "mat3 cotangent_frame( vec3 N, vec3 p, vec2 uv )"
              "{"
              "    // get edge vectors of the pixel triangle"
              "    vec3 dp1 = dFdx( p );"
              "    vec3 dp2 = dFdy( p );"
              "    vec2 duv1 = dFdx( uv );"
              "    vec2 duv2 = dFdy( uv );"
              " "
              "    // solve the linear system"
              "    vec3 dp2perp = cross( dp2, N );"
              "    vec3 dp1perp = cross( N, dp1 );"
              "    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;"
              "    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;"
              ""
              "    // construct a scale-invariant frame"
              "    float scaleMax = max( dot(T,T), dot(B,B) );"
              "    scaleMax = max(scaleMax, 1e-20);  // Add small value to avoid division by zero"
              "    float invmax = inversesqrt( scaleMax );"
              "    return mat3( T * invmax, B * invmax, N );"
              "}"
              ""
              "vec3 normalMapping(sampler2D normalmap, in vec2 texCoords, in float amount)"
              "{"
              "    vec4 normalMapColor = texture2D(normalmap, texCoords) * 2.0 - 1.0;"
              "    normalMapColor.g = -normalMapColor.g;   // Use left handed convention"
              "#if 0 // There are a few problems with the DXT compression hack, turn off for now"
              "    // This trick works for DXT1nm and DXT5nm normal maps (nvcompress -bc1n or -bc3n)"
              "    // It relies on the fact that : "
              "    //   - DXT1nm stores X in R and Y in G, but sets alpha to 1"
              "    //   - DXT5nm stores X in alpha and Y in G, but sets R to 1"
              "    // It will also work for normal maps stored in RGBA textures as long as "
              "    // the alpha channel is set to all white. For RGB textures, alpha is set "
              "    // to white by OpenGL (since they're considered all opaque)."
              "    // See: http://code.google.com/p/nvidia-texture-tools/wiki/NormalMapCompression"
              "    vec3 normal = vec3(normalMapColor.r * normalMapColor.a, normalMapColor.g, 1.0);"
              "    normal.z = sqrt(max(0.0, 1.0 - dot(normal.xy, normal.xy)));"
              "#else"
              "    vec3 normal = normalize(normalMapColor.rgb);"
              "#endif"
              "    normal = normalize(normal * vec3(sign(amount), sign(amount), 1.0 / abs(amount)));"
              ""
              "    // Transform normal from tangent space to world space"
              "    // As the basis is orthogonal, tangent space inverse is the transpose of the tangent space basis"
              "#if !GENERATE_TANGENT_SPACE"
              "    vec3 normalT = normalize(vNormal);"
              "    vec3 tangentT = normalize(vTangent);"
              "    vec3 bitangentT = cross(normalT, tangentT);"
              "    normal = tangentT.xyz * normal.x + bitangentT.xyz * normal.y + normalT.xyz * normal.z;"
              "#else"
              "    vec3 N = normalize(vNormal);"
              "    mat3 TBN = cotangent_frame(N, normalize(vecPosition3), texCoords);"
              "    normal = TBN * normal;"
              "#endif"
              ""
              "    return normal;"
              "}"
              "#endif"
              ""
              "vec4 lightingPipeline(vec4 color, gl_MaterialParameters material, vec3 normal)"
              "{"
              "    if (vxOSG_LightingEnabled)"
              "    {"
              "        color = lighting_implementation(vecPosition3, normal, color, material, true);"
              "    }"
              "    else "
              "    {"
              "        color = material.diffuse * color;"
              "    }"
              ""
              "    return color;"
              "}"
              ""
              "#endif"
              ""
              "#line 5 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.frag\""
              ""
              "// TODO: Move this reusable code in a shared file"
              ""
              "#if NORMAL_MAP"
              "uniform float bumpAmount;"
              "#endif"
              ""
              "#if SPECULAR_MAP"
              "uniform float specularAmount;"
              "#endif"
              ""
              "uniform sampler2D texture0;         // diffuse map"
              "uniform sampler2D texture1;         // normal map"
              "uniform sampler2D texture2;         // specular map"
              ""
              "// End of shared code"
              ""
              "in vec2 texcoord;"
              ""
              "void main(void)"
              "{"
              "    // Configure material"
              "    gl_MaterialParameters material = gl_FrontMaterial;"
              "    material.ambient = vec4(1.0);"
              ""
              "    vec4 color = vec4(1.0);"
              "#if MATERIAL && DIFFUSE_MAP"
              "    color = materialColor(texture0, texcoord.xy);"
              "#endif"
              ""
              "    vec3 normal = getNormal();"
              "#if MATERIAL && NORMAL_MAP"
              "    normal = normalMapping(texture1, texcoord.xy, bumpAmount);"
              "#endif"
              ""
              "#if MATERIAL && SPECULAR_MAP"
              "    material.specular *= vec4(texture2D(texture2, texcoord.xy).rgb * specularAmount, 1.0);"
              "#endif"
              ""
              "    // Do shading"
              "    color = lightingPipeline(color, material, normal);"
              "    color = vertexColor(color);"
              "    color = materialFog(color);"
              "    gl_FragColor = color;"
              "}"
            }
          }
          Shader {
            type GEOMETRY
            code {
              "#define DIFFUSE_MAP 0"
              "#define DIRECTIONAL_LIGHT_COUNT 1"
              "#define FLOW_ANIM 0"
              "#define GENERATE_TANGENT_SPACE 1"
              "#define HEIGHT_FIELD_BLENDING 0"
              "#define HEIGHT_FIELD_EDITION_MODE 0"
              "#define HOLES 0"
              "#define INSTANCING 0"
              "#define MATERIAL 1"
              "#define NORMAL_MAP 0"
              "#define OUTPUT_GBUFFER 0"
              "#define PARTICLES 0"
              "#define POINT_LIGHT_COUNT 0"
              "#define PROJECTIVE_LIGHT_COUNT 0"
              "#define SHADOW 1"
              "#define SPECULAR_MAP 0"
              "#define SPOT_LIGHT_COUNT 0"
              "#define TERRAIN_BLENDING 0"
              "#define TRIPLANAR 0"
              "#define TRIPLANAR_BLENDING 0"
              "#define USE_GEOMETRY_SHADER_PIPELINE 1"
              ""
              "#line 0 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.geom\""
              "#version 150 compatibility"
              "// geometry shaders require at least version 1.5"
              ""
              "// Warning: For the geometry shader, we must use a shader version 1.50 which"
              "// doesn't deal very well with the default lighting pipeline that relies on"
              "// deprecated varyings, uniforms and structures. Some parts of the lighting and"
              "// material were re-implemented in a new pipeline that is compliant with 1.50"
              "// at the vertex level."
              ""
              "#line 0 \"material_common.vert\""
              "//    Copyright (c) 2000-2007 CMLabs Simulations Inc."
              "//"
              "//    http://www.cm-labs.com"
              "//"
              "//    $Name: material_common.vert $"
              "//"
              "//    Date: $Date: 2012/11/02 16:57:00 $"
              "//"
              "//    This software and its accompanying manuals have been developed by CMLabs"
              "//    Simulations Inc. (\\\"CMLabs\\\")."
              "//"
              "//    The copyright to the Vortex Toolkits and all associated materials"
              "//    belongs to CMLabs."
              "//"
              "//    All intellectual property rights in the software belong to CMLabs."
              "//"
              "//    All rights conferred by law (including rights under international"
              "//    copyright conventions) are reserved to CMLabs. This software may also"
              "//    incorporate information which is confidential to CMLabs."
              "//"
              "//    Save to the extent permitted by law, or as otherwise expressly permitted"
              "//    by CMLabs, this software and the manuals must not be copied (in whole or"
              "//    in part), re-arranged, altered or adapted in any way without the prior"
              "//    written consent of CMLabs. In addition, the information contained in the"
              "//    software may not be disseminated without the prior written consent of"
              "//    CMLabs."
              ""
              "#ifndef MATERIAL_COMMON_VERT"
              "#define MATERIAL_COMMON_VERT"
              ""
              "uniform bool vxOSG_TexturedObject;"
              "out vec4 vxg_TexCoord0;"
              "out vec4 vxg_vertexColor;"
              "out vec4 vxg_FragPosition;"
              ""
              "void materialColor(vec4 multiTexCoord0, vec4 vertexColor)"
              "{"
              "    if (vxOSG_TexturedObject)"
              "    {"
              "        vxg_TexCoord0 = gl_TextureMatrix[0] * multiTexCoord0;"
              "    }"
              "    vxg_vertexColor = vertexColor;"
              "}"
              ""
              "void materialClip(vec4 pos)"
              "{"
              "    gl_ClipVertex = pos; // for reflections"
              "}"
              ""
              "void materialFog(vec4 pos)"
              "{"
              "    vxg_FragPosition = pos;"
              "}"
              ""
              "#endif"
              ""
              "#line 10 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.geom\""
              "#line 0 \"shadowMapVD_shadow.geom\""
              "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//   http://www.cm-labs.com"
              "//"
              "//   $Name: shadowMapVD_shadows.vert $"
              "//"
              "//   Date: $Date: 2012/02/29 11:02:19 $"
              "//"
              "//   This software and its accompanying manuals have been developed by CMLabs"
              "//   Simulations Inc. (\"CMLabs\")."
              "//"
              "//   The copyright to the Vortex Toolkits and all associated materials"
              "//   belongs to CMLabs."
              "//"
              "//   All intellectual property rights in the software belong to CMLabs."
              "//"
              "//   All rights conferred by law (including rights under international"
              "//   copyright conventions) are reserved to CMLabs. This software may also"
              "//   incorporate information which is confidential to CMLabs."
              "//"
              "//   Save to the extent permitted by law, or as otherwise expressly permitted"
              "//   by CMLabs, this software and the manuals must not be copied (in whole or"
              "//   in part), re-arranged, altered or adapted in any way without the prior"
              "//   written consent of CMLabs. In addition, the information contained in the"
              "//   software may not be disseminated without the prior written consent of"
              "//   CMLabs."
              "#line 0 \"shadowMapVD_shadow_common.glsl\""
              "//   Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//   http://www.cm-labs.com"
              "//"
              "//   $Name: shadowMapVD_shadows.vert $"
              "//"
              "//   Date: $Date: 2012/02/29 11:02:19 $"
              "//"
              "//   This software and its accompanying manuals have been developed by CMLabs"
              "//   Simulations Inc. (\"CMLabs\")."
              "//"
              "//   The copyright to the Vortex Toolkits and all associated materials"
              "//   belongs to CMLabs."
              "//"
              "//   All intellectual property rights in the software belong to CMLabs."
              "//"
              "//   All rights conferred by law (including rights under international"
              "//   copyright conventions) are reserved to CMLabs. This software may also"
              "//   incorporate information which is confidential to CMLabs."
              "//"
              "//   Save to the extent permitted by law, or as otherwise expressly permitted"
              "//   by CMLabs, this software and the manuals must not be copied (in whole or"
              "//   in part), re-arranged, altered or adapted in any way without the prior"
              "//   written consent of CMLabs. In addition, the information contained in the"
              "//   software may not be disseminated without the prior written consent of"
              "//   CMLabs."
              ""
              "#ifndef SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
              "#define SHADOW_MAP_VD_SHADOW_COMMON_GLSL"
              ""
              "#if SHADOW"
              "uniform int shadowTextureUnit0;"
              ""
              "mat4 getShadowMatrixTransposed()"
              "{"
              "    mat4 shadowMatrixTransposed;"
              "    shadowMatrixTransposed[0] = gl_EyePlaneS[shadowTextureUnit0];"
              "    shadowMatrixTransposed[1] = gl_EyePlaneT[shadowTextureUnit0];"
              "    shadowMatrixTransposed[2] = gl_EyePlaneR[shadowTextureUnit0];"
              "    shadowMatrixTransposed[3] = gl_EyePlaneQ[shadowTextureUnit0];"
              "    return shadowMatrixTransposed;"
              "}"
              ""
              "vec4 getShadowTexCoord(in vec3 position, in mat4 shadowMatrixTransposed)"
              "{"
              "    return vec4(position, 1) * shadowMatrixTransposed;"
              "}"
              "#endif"
              ""
              "#endif"
              ""
              "#line 27 \"shadowMapVD_shadow.geom\""
              ""
              "#if SHADOW"
              "out vec4 shadowTextureCoord;"
              ""
              "void DynamicShadowPipeline(in vec3 position, in mat4 shadowMatrixTransposed)"
              "{"
              "    shadowTextureCoord = getShadowTexCoord(position, shadowMatrixTransposed);"
              "}"
              ""
              "// Override the DynamicShadowPipeline in vertex stage as the computing is done in geometry shader."
              "void DynamicShadowPipeline( in vec3 ecPosition )"
              "{"
              "}"
              "#endif"
              ""
              ""
              "#line 11 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.geom\""
              "#line 0 \"uber_lighting.vert\""
              "//    Copyright (c) 2000-2012 CMLabs Simulations Inc."
              "//"
              "//    http://www.cm-labs.com"
              "//"
              "//    $Name: uber_lighting.vert $"
              "//"
              "//    Date: $Date: 2012/02/29 11:00:00 $"
              "//"
              "//    This software and its accompanying manuals have been developed by CMLabs"
              "//    Simulations Inc. (\\\"CMLabs\\\")."
              "//"
              "//    The copyright to the Vortex Toolkits and all associated materials"
              "//    belongs to CMLabs."
              "//"
              "//    All intellectual property rights in the software belong to CMLabs."
              "//"
              "//    All rights conferred by law (including rights under international"
              "//    copyright conventions) are reserved to CMLabs. This software may also"
              "//    incorporate information which is confidential to CMLabs."
              "//"
              "//    Save to the extent permitted by law, or as otherwise expressly permitted"
              "//    by CMLabs, this software and the manuals must not be copied (in whole or"
              "//    in part), re-arranged, altered or adapted in any way without the prior"
              "//    written consent of CMLabs. In addition, the information contained in the"
              "//    software may not be disseminated without the prior written consent of"
              "//    CMLabs."
              ""
              "#ifndef UBER_LIGHTING_VERT"
              "#define UBER_LIGHTING_VERT"
              ""
              "uniform bool vxOSG_LightingEnabled;"
              ""
              "out vec3 vNormal;"
              "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
              "out vec3 vTangent;"
              "#endif"
              "out vec3 vecPosition3;"
              ""
              "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
              "in vec3 tangentAttrib;"
              "#endif"
              ""
              "void lighting( in vec3 normal, in vec4 ecPos, in vec3 ecPosition3 )"
              "{"
              "    vNormal = normalize(normal);"
              "#if MATERIAL && NORMAL_MAP && !GENERATE_TANGENT_SPACE"
              "    vTangent = normalize(osg_NormalMatrix * tangentAttrib);"
              "    #if PARTICLES"
              "    vTangent = normalize(tangentAttrib);"
              "    #endif"
              "#endif"
              "    vecPosition3 = ecPosition3;"
              ""
              "#if SHADOW"
              "    DynamicShadowPipeline( ecPos.xyz );"
              "#endif"
              "}"
              ""
              "void lightingPipeline(vec3 normal, vec4 position4)"
              "{"
              "    if (vxOSG_LightingEnabled)"
              "    {"
              "        lighting( normal, position4, position4.xyz / position4.w );"
              "    }"
              "}"
              ""
              "#endif"
              ""
              "#line 12 \"C:/CM Labs/Vortex Dynamics 6.2/x86 vc10 osg/resources/shaders/fastCable.geom\""
              ""
              "layout (lines) in;"
              "layout (triangle_strip, max_vertices = 4) out;"
              ""
              ""
              "in vec4 positionViewA[2];"
              "in vec4 positionViewB[2];"
              "in vec4 positionProjA[2];"
              "in vec4 positionProjB[2];"
              "in vec3 normalA[2];"
              "in vec3 normalB[2];"
              "in vec2 texCoordA[2];"
              "in vec2 texCoordB[2];"
              "in mat4 shadowMatrixTransposed[2];"
              "in vec4 vertexColor[2];"
              ""
              "out vec2 texcoord;"
              ""
              "void materialAndLighting(vec4 position4, vec3 normal, vec2 texCoord, vec4 color)"
              "{"
              "    vec3 position = position4.xyz / position4.w;"
              "    #if SHADOW"
              "    DynamicShadowPipeline(position, shadowMatrixTransposed[0]);"
              "    #endif"
              "    lightingPipeline(normal, position4);"
              "    materialFog(vec4(position, 1.0));"
              "    materialColor(vec4(texCoord, 0, 0), color);"
              "    texcoord = texCoord;"
              "}"
              ""
              "void main(void)"
              "{"
              "    // Emit a quad using the following vertex order:"
              "    // Vertex 0 : Control point B, vertex input 0"
              "    // Vertex 1 : Control point B, vertex input 1"
              "    // Vertex 2 : Control point A, vertex input 0"
              "    // Vertex 3 : Control point A, vertex input 1"
              ""
              "    // Vertex 0 : Control point B, vertex input 0"
              "    gl_Position = positionProjB[0];"
              "    materialAndLighting(positionViewB[0], normalB[0], texCoordB[0], vertexColor[0]);"
              "    EmitVertex();"
              "    "
              "    // Vertex 1 : Control point B, vertex input 1"
              "    gl_Position = positionProjB[1];"
              "    materialAndLighting(positionViewB[1], normalB[1], texCoordB[1], vertexColor[1]);"
              "    EmitVertex();"
              "    "
              "    // Vertex 2 : Control point A, vertex input 0"
              "    gl_Position = positionProjA[0];"
              "    materialAndLighting(positionViewA[0], normalA[0], texCoordA[0], vertexColor[0]);"
              "    EmitVertex();"
              "    "
              "    // Vertex 3 : Control point A, vertex input 1"
              "    gl_Position = positionProjA[1];"
              "    materialAndLighting(positionViewA[1], normalA[1], texCoordA[1], vertexColor[1]);"
              "    EmitVertex();"
              ""
              "    EndPrimitive();"
              "}"
            }
          }
        }
      }
      num_drawables 1
      Geometry {
        UniqueID Geometry_127
        StateSet {
          UniqueID StateSet_128
          rendering_hint DEFAULT_BIN
          renderBinMode INHERIT
          GL_CULL_FACE ON
          Uniform {
            UniqueID Uniform_129
            DataVariance DYNAMIC
            name "color"
            type vec4 1 FloatArray 4
            {
              1 1 1 1 
            }
          }
          CullFace {
            mode BACK
          }
        }
        supportsDisplayList FALSE
        useDisplayList FALSE
        useVertexBufferObjects TRUE
        PrimitiveSets 1
        {
          DrawElementsUShort LINES 20 25
          {
            0 1 1 2 2 3 3 4 4 5
            5 6 6 7 7 8 8 9 9 10
          }
        }
        VertexArray Vec3Array 11
        {
          0 0.1 0
          0.0587785 0.0809017 0
          0.0951057 0.0309017 0
          0.0951057 -0.0309017 0
          0.0587785 -0.0809017 0
          1.22465e-017 -0.1 0
          -0.0587785 -0.0809017 0
          -0.0951057 -0.0309017 0
          -0.0951057 0.0309017 0
          -0.0587785 0.0809017 0
          -2.44929e-017 0.1 0
        }
        NormalBinding PER_VERTEX
        NormalArray Vec3Array 11
        {
          0 1 0
          0.587785 0.809017 0
          0.951057 0.309017 0
          0.951057 -0.309017 0
          0.587785 -0.809017 0
          1.22465e-016 -1 0
          -0.587785 -0.809017 0
          -0.951057 -0.309017 0
          -0.951057 0.309017 0
          -0.587785 0.809017 0
          -2.44929e-016 1 0
        }
        TexCoordArray 0 FloatArray 11
        {
          0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
          1 
        }
      }
    }
  }
}
